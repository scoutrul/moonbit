const fetch = require('node-fetch');
const logger = require('../utils/logger');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã
 */
class MoonService {
  constructor() {
    // –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã
    this.moonPhasesCache = [];
    this.lastUpdate = null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∑—ã –õ—É–Ω—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
   * @param {Date} date - –î–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∑—ã –õ—É–Ω—ã
   */
  async getMoonPhaseForDate(date = new Date()) {
    await this.updateMoonPhasesIfNeeded();
    
    const targetDate = new Date(date);
    const dateStr = targetDate.toISOString().split('T')[0];
    
    const moonPhase = this.moonPhasesCache.find(phase => phase.date.includes(dateStr));
    return moonPhase || { 
      date: dateStr, 
      phase: 'unknown', 
      emoji: 'üåë',
      illumination: 0
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∑ –õ—É–Ω—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   */
  async getMoonPhases(startDate = new Date(), endDate = null) {
    // –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    if (!endDate) {
      endDate = new Date();
      endDate.setDate(endDate.getDate() + 30);
    }
    
    await this.updateMoonPhasesIfNeeded();
    
    const start = startDate.toISOString().split('T')[0];
    const end = endDate.toISOString().split('T')[0];
    
    return this.moonPhasesCache.filter(phase => {
      const phaseDate = phase.date.split('T')[0];
      return phaseDate >= start && phaseDate <= end;
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –õ—É–Ω—ã
   */
  async getCurrentMoonPhase() {
    return this.getMoonPhaseForDate(new Date());
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã
   */
  async updateMoonPhases() {
    try {
      // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
      const today = new Date();
      // –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ - 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      const startDate = new Date();
      startDate.setDate(today.getDate() - 30);
      // –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ - 90 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
      const endDate = new Date();
      endDate.setDate(today.getDate() + 90);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
      const response = await fetch(`https://www.farmsense.net/api/astro/moon-phase/?d=${startDate.getTime() / 1000},${endDate.getTime() / 1000}`);
      const data = await response.json();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const processedData = data.map(item => {
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –õ—É–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ illumination
        const illum = parseFloat(item.illumination);
        const phase = this.getMoonPhaseFromIllumination(illum, item.phase_name);
        
        return {
          date: new Date(item.date * 1000).toISOString(),
          phase: phase.name,
          emoji: phase.emoji,
          illumination: illum
        };
      });
      
      this.moonPhasesCache = processedData;
      this.lastUpdate = Date.now();
      
      logger.debug('–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã');
      return processedData;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã:', error);
      // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç cached –¥–∞–Ω–Ω—ã—Ö –∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      if (this.moonPhasesCache.length === 0) {
        this.createMockMoonPhases();
      }
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ñ–∞–∑ –õ—É–Ω—ã
   */
  async updateMoonPhasesIfNeeded() {
    if (this.shouldUpdateCache()) {
      await this.updateMoonPhases();
    }
    return this.moonPhasesCache;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
   */
  shouldUpdateCache() {
    if (!this.lastUpdate) return true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –õ—É–Ω—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å
    const hoursPassed = (Date.now() - this.lastUpdate) / (1000 * 60 * 60);
    return hoursPassed >= 24;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –õ—É–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ illumination
   * @param {number} illumination - –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å –õ—É–Ω—ã (0-1)
   * @param {string} phaseName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–∑ API
   */
  getMoonPhaseFromIllumination(illumination, phaseName) {
    // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã
    const phases = [
      { name: 'new_moon', emoji: 'üåë', illumination: 0 },
      { name: 'waxing_crescent', emoji: 'üåí', illumination: 0.25 },
      { name: 'first_quarter', emoji: 'üåì', illumination: 0.5 },
      { name: 'waxing_gibbous', emoji: 'üåî', illumination: 0.75 },
      { name: 'full_moon', emoji: 'üåï', illumination: 1 },
      { name: 'waning_gibbous', emoji: 'üåñ', illumination: 0.75 },
      { name: 'last_quarter', emoji: 'üåó', illumination: 0.5 },
      { name: 'waning_crescent', emoji: 'üåò', illumination: 0.25 }
    ];
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (phaseName) {
      const matchedPhase = phases.find(p => 
        p.name.toLowerCase().includes(phaseName.toLowerCase()) ||
        phaseName.toLowerCase().includes(p.name.toLowerCase())
      );
      
      if (matchedPhase) return matchedPhase;
    }
    
    // –ò–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ illumination
    if (illumination >= 0.95) return phases[4]; // full_moon
    if (illumination <= 0.05) return phases[0]; // new_moon
    
    if (illumination < 0.5) {
      // –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞
      return illumination < 0.25 ? phases[1] : phases[2];
    } else {
      // –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞
      return illumination > 0.75 ? phases[5] : phases[6];
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–∑ –õ—É–Ω—ã, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
   */
  createMockMoonPhases() {
    const today = new Date();
    const phases = [];
    
    for (let i = -30; i <= 90; i++) {
      const date = new Date();
      date.setDate(today.getDate() + i);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∑—É –õ—É–Ω—ã –ø–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ
      // –õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª - –æ–∫–æ–ª–æ 29.53 –¥–Ω–µ–π
      const lunarAge = (i % 29.53) / 29.53;
      const illumination = Math.sin(lunarAge * Math.PI);
      
      const phase = this.getMoonPhaseFromIllumination(Math.abs(illumination));
      
      phases.push({
        date: date.toISOString(),
        phase: phase.name,
        emoji: phase.emoji,
        illumination: Math.abs(illumination)
      });
    }
    
    this.moonPhasesCache = phases;
    this.lastUpdate = Date.now();
    
    logger.debug('–°–æ–∑–¥–∞–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–∑ –õ—É–Ω—ã');
    return phases;
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const moonService = new MoonService();

module.exports = moonService; 