import { test, expect } from '@playwright/test';

test.describe('Demo Page', () => {
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º', async ({ page }) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/demo');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await expect(page.locator('h1').filter({ hasText: 'MoonBit - –î–µ–º–æ' })).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    const chartContainer = page.locator('[data-testid="chart-container"]');
    await expect(chartContainer).toBeVisible({ timeout: 15000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ canvas –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω
    console.log('üîç –ò—â–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç—ã...');
    
    // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ canvas —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const canvasCount = await page.locator('canvas').count();
    console.log(`üé® –ù–∞–π–¥–µ–Ω–æ canvas —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${canvasCount}`);
    
    if (canvasCount === 0) {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –µ—Å–ª–∏ canvas –Ω–µ –Ω–∞–π–¥–µ–Ω
      const chartContainer = page.locator('[data-testid="chart-container"]');
      const containerHTML = await chartContainer.innerHTML();
      console.log('üîç HTML –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞:', containerHTML.substring(0, 500));
    }
    
    const chartCanvas = page.locator('canvas');
    await expect(chartCanvas).toBeVisible({ timeout: 15000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    await expect(page.locator('text=MoonBit Demo Chart')).toBeVisible();
    await expect(page.locator('text=Timeframe:')).toBeVisible();
    await expect(page.locator('text=Data:')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await expect(page.locator('button:has-text("Refresh Data")')).toBeVisible();
    await expect(page.locator('button:has-text("Change Timeframe")')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await expect(page.locator('text=–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞')).toBeVisible();
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await page.screenshot({ path: 'demo-page-screenshot.png', fullPage: true });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    const consoleMessages = await page.evaluate(() => {
      return window.console;
    });
    
    console.log('–î–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ demo-page-screenshot.png');
  });
  
  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ API', async ({ page }) => {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const requests: string[] = [];
    page.on('request', request => {
      requests.push(request.url());
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const consoleLogs: string[] = [];
    page.on('console', msg => {
      consoleLogs.push(`${msg.type()}: ${msg.text()}`);
    });
    
    await page.goto('/demo');
    await page.waitForLoadState('networkidle');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await page.waitForTimeout(5000);
    
    console.log('Network requests:', requests.filter(url => url.includes('api')));
    console.log('Console logs:', consoleLogs);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const dataPointsText = await page.locator('text=—Ç–æ—á–µ–∫').textContent();
    console.log('Data points found:', dataPointsText);
  });
}); 