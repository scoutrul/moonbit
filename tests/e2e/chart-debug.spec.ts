import { test, expect } from '@playwright/test';

test.describe('Chart Debug', () => {
  test('–¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞', async ({ page }) => {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞...');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Å–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const consoleLogs: string[] = [];
    page.on('console', msg => {
      const message = `${msg.type()}: ${msg.text()}`;
      consoleLogs.push(message);
      console.log('CONSOLE:', message);
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ—à–∏–±–∫–∏
    const errors: string[] = [];
    page.on('pageerror', error => {
      const message = `PAGE ERROR: ${error.message}`;
      errors.push(message);
      console.log('‚ùå', message);
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const failedRequests: string[] = [];
    page.on('requestfailed', request => {
      const message = `FAILED REQUEST: ${request.url()} - ${request.failure()?.errorText}`;
      failedRequests.push(message);
      console.log('üö´', message);
    });
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º /demo...');
    await page.goto('/demo', { timeout: 30000 });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
    await page.waitForLoadState('networkidle', { timeout: 30000 });
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...');
    
    const titleExists = await page.locator('h1:has-text("MoonBit - –î–µ–º–æ")').isVisible();
    console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ:', titleExists ? '‚úÖ' : '‚ùå');
    
    const infoPanel = await page.locator('text=MoonBit Demo Chart').isVisible();
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å:', infoPanel ? '‚úÖ' : '‚ùå');
    
    const controlPanel = await page.locator('button:has-text("Refresh Data")').isVisible();
    console.log('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', controlPanel ? '‚úÖ' : '‚ùå');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö
    const dataInfo = page.locator('text=—Ç–æ—á–µ–∫');
    await dataInfo.waitFor({ timeout: 15000 });
    const dataText = await dataInfo.textContent();
    console.log('–î–∞–Ω–Ω—ã–µ:', dataText);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Chart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Chart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç...');
    
    // –ò—â–µ–º ChartContainer
    const chartContainer = page.locator('.chart-widget');
    const chartExists = await chartContainer.isVisible();
    console.log('Chart Container:', chartExists ? '‚úÖ' : '‚ùå');
    
    if (chartExists) {
      // –ò—â–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞
      const canvas = chartContainer.locator('canvas');
      const canvasCount = await canvas.count();
      console.log('Canvas —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', canvasCount);
      
      if (canvasCount > 0) {
        const canvasVisible = await canvas.first().isVisible();
        console.log('Canvas –≤–∏–¥–∏–º—ã–π:', canvasVisible ? '‚úÖ' : '‚ùå');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        const canvasBox = await canvas.first().boundingBox();
        console.log('Canvas —Ä–∞–∑–º–µ—Ä—ã:', canvasBox);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const loadingSpinner = chartContainer.locator('[data-testid="loading"]');
      const isLoading = await loadingSpinner.isVisible();
      console.log('Loading —Å–ø–∏–Ω–Ω–µ—Ä:', isLoading ? 'üîÑ' : '‚úÖ (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º error —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const errorMessage = chartContainer.locator('[data-testid="error"]');
      const hasError = await errorMessage.isVisible();
      console.log('Error —Å–æ–æ–±—â–µ–Ω–∏–µ:', hasError ? '‚ùå (–µ—Å—Ç—å –æ—à–∏–±–∫–∞)' : '‚úÖ (–Ω–µ—Ç –æ—à–∏–±–æ–∫)');
      
      if (hasError) {
        const errorText = await errorMessage.textContent();
        console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–≥–∏–Ω—ã –∏ —Å–æ–±—ã—Ç–∏—è
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–≥–∏–Ω—ã –∏ —Å–æ–±—ã—Ç–∏—è...');
    
    const eventsInfo = page.locator('text=–ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑');
    const eventsText = await eventsInfo.textContent();
    console.log('–õ—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', eventsText);
    
    // 5. –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
    await page.screenshot({ 
      path: 'chart-debug-screenshot.png', 
      fullPage: true 
    });
    
    // 6. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    console.log('–ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', consoleLogs.length);
    console.log('–û—à–∏–±–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', errors.length);
    console.log('–ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:', failedRequests.length);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      errors.forEach(error => console.log('  -', error));
    }
    
    if (failedRequests.length > 0) {
      console.log('\nüö´ –ù–ï–£–î–ê–ß–ù–´–ï –ó–ê–ü–†–û–°–´:');
      failedRequests.forEach(req => console.log('  -', req));
    }
    
    console.log('\nüìù –ö–õ–Æ–ß–ï–í–´–ï –õ–û–ì–ò:');
    consoleLogs
      .filter(log => log.includes('Demo:') || log.includes('API') || log.includes('Chart') || log.includes('ERROR'))
      .forEach(log => console.log('  -', log));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å
    await expect(page.locator('text=MoonBit Demo Chart')).toBeVisible();
    await expect(page.locator('text=—Ç–æ—á–µ–∫')).toBeVisible();
  });
}); 