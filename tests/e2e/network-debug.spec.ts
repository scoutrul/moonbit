import { test, expect } from '@playwright/test';

test.describe('Network Debug', () => {
  test('–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    console.log('üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const requests: string[] = [];
    const failedRequests: string[] = [];
    const responses: { url: string; status: number; contentType: string }[] = [];
    
    page.on('request', request => {
      const url = request.url();
      requests.push(url);
      console.log('üì§ REQUEST:', url);
    });
    
    page.on('requestfailed', request => {
      const url = request.url();
      failedRequests.push(url);
      console.log('‚ùå FAILED REQUEST:', url, request.failure()?.errorText);
    });
    
    page.on('response', response => {
      const url = response.url();
      const status = response.status();
      const contentType = response.headers()['content-type'] || 'unknown';
      
      responses.push({ url, status, contentType });
      
      if (status >= 400) {
        console.log('‚ùå ERROR RESPONSE:', status, url);
      } else if (url.includes('lightweight') || url.includes('chart')) {
        console.log('üìä CHART RELATED:', status, url, contentType);
      }
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    const consoleErrors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        const message = msg.text();
        consoleErrors.push(message);
        console.log('üî¥ CONSOLE ERROR:', message);
      } else if (msg.text().includes('Demo:') || msg.text().includes('lightweight')) {
        console.log('üìä CHART LOG:', msg.text());
      }
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º JavaScript –æ—à–∏–±–∫–∏
    const jsErrors: string[] = [];
    page.on('pageerror', error => {
      const message = error.message;
      jsErrors.push(message);
      console.log('üí• JS ERROR:', message);
    });
    
    await page.goto('/demo');
    await page.waitForLoadState('networkidle');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await page.waitForTimeout(3000);
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–ï–¢–ï–í–´–• –ó–ê–ü–†–û–°–û–í:');
    console.log('- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', requests.length);
    console.log('- –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', failedRequests.length);
    console.log('- –ö–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫:', consoleErrors.length);
    console.log('- JavaScript –æ—à–∏–±–æ–∫:', jsErrors.length);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –º–æ–¥—É–ª—è–º
    const moduleRequests = requests.filter(url => 
      url.includes('.js') || url.includes('.ts') || url.includes('.jsx') || url.includes('.tsx')
    );
    
    console.log('\nüì¶ –ú–û–î–£–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´:');
    moduleRequests.forEach(url => {
      const response = responses.find(r => r.url === url);
      const status = response ? response.status : 'unknown';
      const isFailed = failedRequests.includes(url);
      
      console.log(`  ${isFailed ? '‚ùå' : '‚úÖ'} ${status} ${url.split('/').pop()}`);
    });
    
    // –ò—â–µ–º lightweight-charts —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    const lightweightRequests = requests.filter(url => 
      url.includes('lightweight') || url.includes('chart')
    );
    
    if (lightweightRequests.length > 0) {
      console.log('\nüìà LIGHTWEIGHT-CHARTS –ó–ê–ü–†–û–°–´:');
      lightweightRequests.forEach(url => {
        const response = responses.find(r => r.url === url);
        console.log(`  ${response?.status || 'unknown'} ${url}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï–¢ –ó–ê–ü–†–û–°–û–í –ö LIGHTWEIGHT-CHARTS!');
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    if (consoleErrors.length > 0) {
      console.log('\nüî¥ –ö–û–ù–°–û–õ–¨–ù–´–ï –û–®–ò–ë–ö–ò:');
      consoleErrors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (jsErrors.length > 0) {
      console.log('\nüí• JAVASCRIPT –û–®–ò–ë–ö–ò:');
      jsErrors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (failedRequests.length > 0) {
      console.log('\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ó–ê–ü–†–û–°–´:');
      failedRequests.forEach(url => console.log(`  - ${url}`));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    const pageTitle = await page.title();
    console.log('\nüìÑ –°–¢–†–ê–ù–ò–¶–ê:', pageTitle);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const hasHeader = await page.locator('h1').isVisible();
    const hasChartWidget = await page.locator('.chart-widget').isVisible();
    
    console.log('- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω:', hasHeader ? '‚úÖ' : '‚ùå');
    console.log('- Chart widget –Ω–∞–π–¥–µ–Ω:', hasChartWidget ? '‚úÖ' : '‚ùå');
    
    await page.screenshot({ path: 'network-debug-screenshot.png', fullPage: true });
  });
}); 