import { moonphase, moonillum } from 'astronomia'; // Added moonillum
import moonRepository from '../repositories/MoonRepository.js';
import logger from '../utils/logger.js'; // Assuming logger is used, ensure it's imported

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
class MoonService {
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã
   */
  async updatePhaseData() {
    logger.debug('MoonService: –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã');
    return await moonRepository.fetchMoonPhases();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –ª—É–Ω—ã
   */
  async getCurrentPhase() {
    try {
      const phasesCache = moonRepository.getPhasesCache();
      const now = new Date();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤)
      if (!phasesCache.last_updated || 
          (now - new Date(phasesCache.last_updated)) > 6 * 60 * 60 * 1000) {
        logger.debug('MoonService: –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
        await this.updatePhaseData();
        return moonRepository.getPhasesCache().current;
      }
      
      // –ï—Å–ª–∏ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤—ã—á–∏—Å–ª—è–µ–º
      if (!phasesCache.current) {
        const phase = moonRepository.calculatePhase(now);
        return {
          phase,
          phaseName: moonRepository.getPhaseName(phase),
          date: now.toISOString()
        };
      }
      
      return phasesCache.current;
    } catch (error) {
      logger.error('MoonService: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∑—ã –ª—É–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   * @param {string} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (ISO —Å—Ç—Ä–æ–∫–∞)
   * @param {string} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (ISO —Å—Ç—Ä–æ–∫–∞)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ñ–∞–∑ –ª—É–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  async getPhasesForPeriod(startDate, endDate) {
    try {
      const start = new Date(startDate);
      const end = new Date(endDate);
      const phases = [];
      
      const currentDate = new Date(start);
      while (currentDate <= end) {
        const jd = this._dateToJulianDay(currentDate);
        const illuminatedFraction = moonillum.fraction(jd); // Using astronomia
        // To distinguish between waxing and waning, we might need phase angle or compare with previous/next day's illumination.
        // For simplicity, this example might not fully distinguish waxing/waning for crescent/gibbous without more complex logic or different astronomia functions.
        // moonillum.phaseAngle might be useful here if available and provides enough info.
        // Let's assume for now we get a simple phase name based on illumination.
        const phaseName = this._getPhaseNameFromIllumination(illuminatedFraction, currentDate, jd); 

        phases.push({
          date: currentDate.toISOString().split('T')[0],
          phase: illuminatedFraction, // Store the raw illumination fraction
          phaseName,
        });
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      return phases;
    } catch (error) {
      logger.error('MoonService: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∑—ã –ª—É–Ω—ã
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∑
   */
  async getNextSignificantPhases(count = 4) {
    try {
      const phasesCache = moonRepository.getPhasesCache();
      
      if (phasesCache.upcoming && phasesCache.upcoming.length >= count) {
        return phasesCache.upcoming.slice(0, count);
      }
      
      return moonRepository.calculateUpcomingSignificantPhases(new Date(), count);
    } catch (error) {
      logger.error('MoonService: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∑:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  async getUpcomingLunarEvents(days = 30) {
    try {
      const now = new Date();
      const endDate = new Date(now);
      endDate.setDate(endDate.getDate() + days);
      
      return this.getLunarEventsForPeriod(now, endDate); // Changed from moonRepository.getLunarEventsForPeriod
    } catch (error) {
      logger.error('MoonService: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {string} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (ISO —Å—Ç—Ä–æ–∫–∞)
   * @param {string} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (ISO —Å—Ç—Ä–æ–∫–∞)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  async getHistoricalLunarEvents(startDate, endDate) {
    try {
      if (!startDate || !endDate) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å startDate –∏ endDate');
      }
      
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      if (start >= end) {
        throw new Error('startDate –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ endDate');
      }
      
      return this.getLunarEventsForPeriod(start, end); // Changed from moonRepository.getLunarEventsForPeriod
    } catch (error) {
      logger.error('MoonService: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Array} –°–ø–∏—Å–æ–∫ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  getLunarEventsForPeriod(startDate, endDate) {
    logger.debug(`MoonService: getLunarEventsForPeriod called with startDate: ${startDate}, endDate: ${endDate}`);
    const events = [];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —é–ª–∏–∞–Ω—Å–∫–∏–µ –¥–Ω–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ astronomia
    const startJD = this._dateToJulianDay(new Date(startDate));
    const endJD = this._dateToJulianDay(new Date(endDate));

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ–ª—É–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const newMoons = this._getNewMoons(startJD, endJD);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const fullMoons = this._getFullMoons(startJD, endJD);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const allPhases = [
      ...newMoons.map(date => ({
        date: date.toISOString(),
        type: 'new_moon',
        phase: 0,
        phaseName: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        icon: 'üåë'
      })),
      ...fullMoons.map(date => ({
        date: date.toISOString(),
        type: 'full_moon',
        phase: 0.5,
        phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        icon: 'üåï'
      }))
    ].sort((a, b) => new Date(a.date) - new Date(b.date));

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    // —Ç–∞–∫ –∫–∞–∫ _getNewMoons –∏ _getFullMoons –º–æ–≥—É—Ç –≤–µ—Ä–Ω—É—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    return allPhases.filter(phase => {
      const phaseDate = new Date(phase.date);
      return phaseDate >= new Date(startDate) && phaseDate <= new Date(endDate);
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è —Ñ–∞–∑—ã –ª—É–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–π –¥–æ–ª–∏ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
   * @param {number} illuminatedFraction - –û—Å–≤–µ—â–µ–Ω–Ω–∞—è –¥–æ–ª—è –¥–∏—Å–∫–∞ –ª—É–Ω—ã (0.0 –¥–æ 1.0)
   * @param {Date} currentDate - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç—É—â–µ–π/—É–±—ã–≤–∞—é—â–µ–π —Ñ–∞–∑—ã)
   * @param {number} currentJD - –¢–µ–∫—É—â–∏–π —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã
   * @private
   */
  _getPhaseNameFromIllumination(illuminatedFraction, currentDate, currentJD) {
    // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç—É—â–µ–π/—É–±—ã–≤–∞—é—â–µ–π —Ñ–∞–∑—ã (—Å–µ—Ä–ø, –≥–æ—Ä–±–∞—Ç–∞—è)
    // –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω–µ–º,
    // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è —É–≥–æ–ª —Ñ–∞–∑—ã, –µ—Å–ª–∏ astronomia –µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç.

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã:
    // –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç—É—â–µ–π/—É–±—ã–≤–∞—é—â–µ–π —Ñ–∞–∑—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Å–µ—Ä–ø–∞ –∏ –≥–æ—Ä–±–∞—Ç–æ–π –ª—É–Ω—ã,
    // –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å.
    // –ú—ã –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —Å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è.
    const yesterdayJD = currentJD - 1;
    const yesterdayIllumination = moonillum.fraction(yesterdayJD);
    const isWaxing = illuminatedFraction > yesterdayIllumination;

    if (illuminatedFraction < 0.03) return '–ù–æ–≤–æ–ª—É–Ω–∏–µ'; // New Moon
    if (illuminatedFraction < 0.48 && isWaxing) return '–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø'; // Waxing Crescent
    if (illuminatedFraction >= 0.48 && illuminatedFraction < 0.52 && isWaxing) return '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å'; // First Quarter
    if (illuminatedFraction >= 0.52 && illuminatedFraction < 0.97 && isWaxing) return '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞'; // Waxing Gibbous
    if (illuminatedFraction >= 0.97) return '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'; // Full Moon
    if (illuminatedFraction >= 0.52 && illuminatedFraction < 0.97 && !isWaxing) return '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞'; // Waning Gibbous
    if (illuminatedFraction >= 0.48 && illuminatedFraction < 0.52 && !isWaxing) return '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å'; // Last Quarter
    if (illuminatedFraction < 0.48 && !isWaxing) return '–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø'; // Waning Crescent
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞'; // Default/fallback
  }

  // Helper methods (copied and adapted from client-side AstroService.js)
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ astronomia
   * @param {Date} date - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
   * @returns {number} —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @private
   */
  _dateToJulianDay(date) {
    const d = new Date(date);
    const year = d.getUTCFullYear();
    const month = d.getUTCMonth() + 1;
    const day = d.getUTCDate();
    const hour = d.getUTCHours();
    const minute = d.getUTCMinutes();
    const second = d.getUTCSeconds();

    let jd = 367 * year - Math.floor(7 * (year + Math.floor((month + 9) / 12)) / 4);
    jd += Math.floor(275 * month / 9) + day + 1721013.5;
    jd += (hour + minute / 60 + second / 3600) / 24;
    return jd;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å –≤ JavaScript Date
   * @param {number} jd - —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @returns {Date} –¥–∞—Ç–∞
   * @private
   */
  _julianDayToDate(jd) {
    const z = Math.floor(jd + 0.5);
    const f = (jd + 0.5) - z;
    let a = z;
    if (z >= 2299161) {
      const alpha = Math.floor((z - 1867216.25) / 36524.25);
      a = z + 1 + alpha - Math.floor(alpha / 4);
    }
    const b = a + 1524;
    const c = Math.floor((b - 122.1) / 365.25);
    const d = Math.floor(365.25 * c);
    const e = Math.floor((b - d) / 30.6001);
    const dayOfMonth = b - d - Math.floor(30.6001 * e) + f;
    let month = e - 1;
    if (month > 12) month -= 12;
    let year = c - 4715;
    if (month > 2) year -= 1;
    const dayFraction = dayOfMonth - Math.floor(dayOfMonth);
    const hours = Math.floor(dayFraction * 24);
    const minutes = Math.floor((dayFraction * 24 - hours) * 60);
    const seconds = Math.floor(((dayFraction * 24 - hours) * 60 - minutes) * 60);
    return new Date(Date.UTC(year, month - 1, Math.floor(dayOfMonth), hours, minutes, seconds));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–ª—É–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —é–ª–∏–∞–Ω—Å–∫–∏—Ö –¥–Ω–µ–π
   * @param {number} startJD - –Ω–∞—á–∞–ª—å–Ω—ã–π —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @param {number} endJD - –∫–æ–Ω–µ—á–Ω—ã–π —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @returns {Array<Date>} –º–∞—Å—Å–∏–≤ –¥–∞—Ç –Ω–æ–≤–æ–ª—É–Ω–∏–π
   * @private
   */
  _getNewMoons(startJD, endJD) {
    const results = [];
    let currentJD = moonphase.newMoon(startJD - 1); // –ù–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å —Ä–∞–Ω—å—à–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    if (currentJD < startJD) {
        currentJD = moonphase.newMoon(currentJD + 25); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–æ startJD
    }

    while (currentJD <= endJD) {
      results.push(this._julianDayToDate(currentJD));
      currentJD = moonphase.newMoon(currentJD + 25); // +25 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    }
    return results;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —é–ª–∏–∞–Ω—Å–∫–∏—Ö –¥–Ω–µ–π
   * @param {number} startJD - –Ω–∞—á–∞–ª—å–Ω—ã–π —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @param {number} endJD - –∫–æ–Ω–µ—á–Ω—ã–π —é–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
   * @returns {Array<Date>} –º–∞—Å—Å–∏–≤ –¥–∞—Ç –ø–æ–ª–Ω–æ–ª—É–Ω–∏–π
   * @private
   */
  _getFullMoons(startJD, endJD) {
    const results = [];
    let currentJD = moonphase.full(startJD - 1); // –ù–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å —Ä–∞–Ω—å—à–µ
    if (currentJD < startJD) {
        currentJD = moonphase.full(currentJD + 25);
    }

    while (currentJD <= endJD) {
      results.push(this._julianDayToDate(currentJD));
      currentJD = moonphase.full(currentJD + 25);
    }
    return results;
  }
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–µ Bitcoin (–∑–∞–≥–ª—É—à–∫–∞)
   * @param {Array} bitcoinData - –î–∞–Ω–Ω—ã–µ Bitcoin –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –ª—É–Ω—ã
   */
  analyzeMoonInfluence(bitcoinData) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –ª—É–Ω—ã –Ω–∞ Bitcoin
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    logger.debug('MoonService: –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ª—É–Ω—ã –Ω–∞ Bitcoin (–∑–∞–≥–ª—É—à–∫–∞)');
    
    return {
      correlation: 0.15,
      significance: 'low',
      newMoonImpact: {
        priceChange: '+2.3%',
        volatility: 'increased'
      },
      fullMoonImpact: {
        priceChange: '-1.8%',
        volatility: 'decreased'
      },
      recommendation: '–í–ª–∏—è–Ω–∏–µ –ª—É–Ω—ã –Ω–∞ Bitcoin –º–∏–Ω–∏–º–∞–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—á–∏—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.'
    };
  }
}

const moonService = new MoonService();
export default moonService;
