import express from 'express';
import { container } from '../inversify.config';
import { TYPES } from '../types/types';

const router = express.Router();

// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ª—É–Ω—ã
router.get('/phase', (req, res) => {
  res.json({
    date: new Date().toISOString(),
    phase: 0.5,
    phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'
  });
});

router.get('/phases', (req, res) => {
  const startDate = req.query.startDate || new Date().toISOString();
  const endDate = req.query.endDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
  
  res.json({
    startDate,
    endDate,
    phases: [
      {
        date: new Date().toISOString(),
        phase: 0.5,
        phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'
      }
    ]
  });
});

router.get('/significant', (req, res) => {
  const count = parseInt(req.query.count as string) || 5;
  
  res.json({
    count,
    phases: [
      {
        date: new Date().toISOString(),
        type: 'full',
        phase: 0.5,
        phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        icon: 'full-moon'
      }
    ]
  });
});

router.get('/events', (req, res) => {
  const days = parseInt(req.query.days as string) || 30;
  
  res.json({
    days,
    events: [
      {
        date: new Date().toISOString(),
        type: 'full',
        phase: 0.5,
        phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        icon: 'full-moon'
      }
    ]
  });
});

/**
 * @route GET /api/moon/historical-events
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 * @param {string} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (ISO —Ñ–æ—Ä–º–∞—Ç)
 * @param {string} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (ISO —Ñ–æ—Ä–º–∞—Ç)
 * @access Public
 */
router.get('/historical-events', (req, res) => {
  const startDate = req.query.startDate as string || new Date().toISOString();
  const endDate = req.query.endDate as string || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
  
  console.log(`–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${startDate} - ${endDate}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const events = generateMockLunarEvents(new Date(startDate), new Date(endDate));
  
  res.json(events);
});

/**
 * @route GET /api/moon/upcoming-events
 * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 * @access Public
 */
router.get('/upcoming-events', (req, res) => {
  const days = parseInt(req.query.days as string) || 30;
  
  console.log(`–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ ${days} –¥–Ω–µ–π`);
  
  const now = new Date();
  const endDate = new Date(now);
  endDate.setDate(endDate.getDate() + days);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const events = generateMockLunarEvents(now, endDate);
  
  res.json(events);
});

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @param {Date} startDate - –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
 * @param {Date} endDate - –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
 * @returns {Array} –º–∞—Å—Å–∏–≤ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */
function generateMockLunarEvents(startDate: Date, endDate: Date) {
  const events = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endDate –±–æ–ª—å—à–µ startDate
  if (endDate < startDate) {
    console.error('–û—à–∏–±–∫–∞: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã');
    return [];
  }
  
  // –õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–º–µ—Ä–Ω–æ 29.53 –¥–Ω–µ–π
  const lunarCycle = 29.53 * 24 * 60 * 60 * 1000; // ~29.53 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const halfLunarCycle = lunarCycle / 2;
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ 1 —è–Ω–≤–∞—Ä—è 2022 –≥–æ–¥–∞ –±—ã–ª–æ –Ω–æ–≤–æ–ª—É–Ω–∏–µ
  const referenceNewMoon = new Date('2022-01-01T00:00:00Z').getTime();
  const msFromReference = startDate.getTime() - referenceNewMoon;
  const cyclesSinceReference = msFromReference / lunarCycle;
  const cycleFraction = cyclesSinceReference - Math.floor(cyclesSinceReference);
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–æ–≤–æ–ª—É–Ω–∏—è
  let nearestNewMoon;
  if (cycleFraction < 0.5) {
    // –ë–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –±—ã–ª–æ –Ω–µ–¥–∞–≤–Ω–æ
    nearestNewMoon = new Date(startDate.getTime() - cycleFraction * lunarCycle);
  } else {
    // –ë–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ
    nearestNewMoon = new Date(startDate.getTime() + (1 - cycleFraction) * lunarCycle);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ
  let currentDate = new Date(nearestNewMoon);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  while (currentDate <= endDate) {
    if (currentDate >= startDate) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–ª—É–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      events.push({
        date: new Date(currentDate).toISOString(),
        type: 'new_moon',
        phase: 0,
        phaseName: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        icon: 'üåë'
      });
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª–Ω–æ–ª—É–Ω–∏—é
    const fullMoonDate = new Date(currentDate.getTime() + halfLunarCycle);
    if (fullMoonDate <= endDate && fullMoonDate >= startDate) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      events.push({
        date: fullMoonDate.toISOString(),
        type: 'full_moon',
        phase: 0.5,
        phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        icon: 'üåï'
      });
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É
    currentDate = new Date(currentDate.getTime() + lunarCycle);
  }
  
  return events.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
}

export default router; 