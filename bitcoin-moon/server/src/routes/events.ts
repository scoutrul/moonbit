import express from 'express';
import { container } from '../inversify.config';
import { TYPES } from '../types/types';

const router = express.Router();

/**
 * @route GET /api/events/upcoming
 * @description –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {number} days –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 * @access Public
 */
router.get('/upcoming', (req, res) => {
  const days = parseInt(req.query.days as string) || 30;
  
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  const events = generateMockEvents(days);
  
  res.json(events);
});

/**
 * @route GET /api/events/by-date-range
 * @description –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
 * @param {string} startDate –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
 * @param {string} endDate –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
 * @access Public
 */
router.get('/by-date-range', (req, res) => {
  const startDate = req.query.startDate as string || new Date().toISOString();
  const endDate = req.query.endDate as string || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
  
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  const events = generateMockEvents(30);
  
  res.json(events);
});

/**
 * @route GET /api/events/economic/upcoming
 * @description –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
 * @param {number} limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
 * @access Public
 */
router.get('/economic/upcoming', (req, res) => {
  const limit = parseInt(req.query.limit as string) || 10;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
  const events = generateMockEconomicEvents(limit);
  
  res.json(events);
});

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} days –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
 */
function generateMockEvents(days: number) {
  const events = [];
  const now = new Date();
  
  for (let i = 0; i < 10; i++) {
    const date = new Date(now);
    date.setDate(date.getDate() + Math.floor(Math.random() * days));
    
    events.push({
      id: `event-${i}`,
      date: date.toISOString(),
      title: `–°–æ–±—ã—Ç–∏–µ ${i}`,
      description: `–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ${i}`,
      type: i % 2 === 0 ? 'moon' : 'astro'
    });
  }
  
  return events;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 * @param {number} limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 */
function generateMockEconomicEvents(limit: number) {
  const events = [];
  const now = new Date();
  
  const economicEventTypes = [
    '–†–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ –§–†–°',
    '–û—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏',
    '–ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω',
    '–í–í–ü',
    '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
    '–ò–Ω–¥–µ–∫—Å –¥–µ–ª–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    '–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ–∑–Ω–∏—á–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º',
    '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≥–ª–∞–≤—ã –§–†–°',
    '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∑–∞—Å–µ–¥–∞–Ω–∏—è –§–†–°',
    '–û—Ç—á–µ—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–∞–ª–∞–Ω—Å—É'
  ];
  
  for (let i = 0; i < limit; i++) {
    const date = new Date(now);
    date.setDate(date.getDate() + Math.floor(Math.random() * 30)); // –°–æ–±—ã—Ç–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
    
    events.push({
      id: `economic-${i}`,
      date: date.toISOString(),
      title: economicEventTypes[i % economicEventTypes.length],
      description: `–í–∞–∂–Ω–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ #${i}`,
      type: 'economic',
      icon: 'üìä',
      impact: Math.floor(Math.random() * 3) + 1 // –í–ª–∏—è–Ω–∏–µ –æ—Ç 1 –¥–æ 3
    });
  }
  
  return events.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
}

export default router; 