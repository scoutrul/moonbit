import logger from '../utils/logger.js';
import AstroService from '../services/AstroService.js';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –õ—É–Ω–µ
 */
const moonController = {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –õ—É–Ω—ã
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getCurrentPhase: async (req, res) => {
    try {
      const phaseInfo = AstroService.getCurrentMoonPhaseInfo();
      
      res.status(200).json({
        phase: phaseInfo.phase,
        phaseName: phaseInfo.phaseName,
        icon: phaseInfo.icon,
        nextPhaseTime: phaseInfo.nextPhaseTime,
        nextPhaseName: phaseInfo.nextPhaseName
      });
    } catch (error) {
      logger.error('Error in getCurrentPhase:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –õ—É–Ω—ã' });
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∑—ã –õ—É–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getPhasesForPeriod: async (req, res) => {
    try {
      const { startDate, endDate } = req.query;
      
      if (!startDate || !endDate) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å startDate –∏ endDate' });
      }
      
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      if (isNaN(start.getTime()) || isNaN(end.getTime())) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã' });
      }
      
      const events = AstroService.getLunarEventsInPeriod(start, end);
      
      res.status(200).json(events);
    } catch (error) {
      logger.error('Error in getPhasesForPeriod:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∑ –õ—É–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥' });
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∑—ã –õ—É–Ω—ã
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getNextSignificantPhases: async (req, res) => {
    try {
      const count = parseInt(req.query.count) || 4;
      const now = new Date();
      
      // –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      const nextNewMoon = AstroService.getNewMoonAfter(now);
      const nextFullMoon = AstroService.getFullMoonAfter(now);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∑
      const phases = [];
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ñ–∞–∑—É
      if (nextNewMoon < nextFullMoon) {
        phases.push({
          date: nextNewMoon.toISOString(),
          type: 'new_moon',
          phaseName: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
          icon: 'üåë'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ
        phases.push({
          date: nextFullMoon.toISOString(),
          type: 'full_moon',
          phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          icon: 'üåï'
        });
      } else {
        phases.push({
          date: nextFullMoon.toISOString(),
          type: 'full_moon',
          phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          icon: 'üåï'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–ª—É–Ω–∏–µ
        phases.push({
          date: nextNewMoon.toISOString(),
          type: 'new_moon',
          phaseName: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
          icon: 'üåë'
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∑—ã
      let lastNewMoon = nextNewMoon;
      let lastFullMoon = nextFullMoon;
      
      while (phases.length < count) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ
        const newMoon = AstroService.getNewMoonAfter(lastNewMoon);
        phases.push({
          date: newMoon.toISOString(),
          type: 'new_moon',
          phaseName: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
          icon: 'üåë'
        });
        lastNewMoon = newMoon;
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤—ã—Ö–æ–¥–∏–º
        if (phases.length >= count) break;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ
        const fullMoon = AstroService.getFullMoonAfter(lastFullMoon);
        phases.push({
          date: fullMoon.toISOString(),
          type: 'full_moon',
          phaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          icon: 'üåï'
        });
        lastFullMoon = fullMoon;
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∑—ã –ø–æ –¥–∞—Ç–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      phases.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      res.status(200).json(phases.slice(0, count));
    } catch (error) {
      logger.error('Error in getNextSignificantPhases:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∑ –õ—É–Ω—ã' });
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getUpcomingLunarEvents: async (req, res) => {
    try {
      const days = parseInt(req.query.days) || 30;
      const now = new Date();
      const end = new Date(now);
      end.setDate(end.getDate() + days);
      
      const events = AstroService.getLunarEventsInPeriod(now, end);
      
      res.status(200).json(events);
    } catch (error) {
      logger.error('Error in getUpcomingLunarEvents:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π' });
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getHistoricalLunarEvents: async (req, res) => {
    try {
      const { startDate, endDate } = req.query;
      
      if (!startDate || !endDate) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å startDate –∏ endDate' });
      }
      
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      if (isNaN(start.getTime()) || isNaN(end.getTime())) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã' });
      }
      
      const events = AstroService.getLunarEventsInPeriod(start, end);
      
      res.status(200).json(events);
    } catch (error) {
      logger.error('Error in getHistoricalLunarEvents:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π' });
    }
  },

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ñ–∞–∑ –õ—É–Ω—ã –Ω–∞ —Ä—ã–Ω–æ–∫ –±–∏—Ç–∫–æ–∏–Ω–∞
   * @param {Object} req - HTTP –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - HTTP –æ—Ç–≤–µ—Ç
   */
  getMoonInfluence: async (req, res) => {
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      res.status(200).json({
        influence: 'neutral',
        description: '–í–ª–∏—è–Ω–∏–µ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑ –Ω–∞ —Ä—ã–Ω–æ–∫ –±–∏—Ç–∫–æ–∏–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        disclaimer: '–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π'
      });
    } catch (error) {
      logger.error('Error in getMoonInfluence:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∑ –õ—É–Ω—ã' });
    }
  }
};

export default moonController;
