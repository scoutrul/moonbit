import React, { useEffect, useState } from 'react';
import { fetchUpcomingEvents } from '../services/astroEvents.js';
import dayjs from 'dayjs';
import 'dayjs/locale/ru';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
dayjs.locale('ru');

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */
const LunarEventsWidget = () => {
  const [lunarEvents, setLunarEvents] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadEvents = async () => {
      try {
        setIsLoading(true);
        console.log('LunarEventsWidget: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        const events = await fetchUpcomingEvents(30);
        console.log('LunarEventsWidget: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', events.length, events);
        
        if (events && events.length > 0) {
          setLunarEvents(events);
          setError(null);
        } else {
          console.warn('LunarEventsWidget: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π');
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
          const mockEvents = generateMockLunarEvents();
          console.log('LunarEventsWidget: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:', mockEvents.length);
          setLunarEvents(mockEvents);
        }
      } catch (err) {
        console.error('LunarEventsWidget: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑–∞—Ö');
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const mockEvents = generateMockLunarEvents();
        console.log('LunarEventsWidget: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:', mockEvents.length);
        setLunarEvents(mockEvents);
      } finally {
        setIsLoading(false);
      }
    };

    loadEvents();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const generateMockLunarEvents = () => {
    const events = [];
    const today = new Date();
    
    // –ù–æ–≤–æ–ª—É–Ω–∏–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
    const newMoonDate = new Date(today);
    newMoonDate.setDate(newMoonDate.getDate() + 7);
    events.push({
      type: 'new_moon',
      date: newMoonDate
    });
    
    // –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π
    const fullMoonDate = new Date(today);
    fullMoonDate.setDate(fullMoonDate.getDate() + 14);
    events.push({
      type: 'full_moon',
      date: fullMoonDate
    });
    
    // –ù–æ–≤–æ–ª—É–Ω–∏–µ —á–µ—Ä–µ–∑ 21 –¥–µ–Ω—å
    const newMoonDate2 = new Date(today);
    newMoonDate2.setDate(newMoonDate2.getDate() + 21);
    events.push({
      type: 'new_moon',
      date: newMoonDate2
    });
    
    return events;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (date) => {
    return dayjs(date).format('DD MMMM YYYY');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã
  const getPhaseLabel = (type) => {
    return type === 'new_moon' ? '–ù–æ–≤–æ–ª—É–Ω–∏–µ' : '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ñ–∞–∑—ã
  const getPhaseIcon = (type) => {
    return type === 'new_moon' ? 'üåë' : 'üåï';
  };

  if (isLoading) {
    return (
      <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4 text-gray-800 dark:text-white">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h2>
        <div className="animate-pulse space-y-3">
          {Array(3).fill(0).map((_, index) => (
            <div key={index} className="flex items-start">
              <div className="h-6 w-6 bg-gray-200 dark:bg-gray-700 rounded-full mr-3"></div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error && lunarEvents.length === 0) {
    return (
      <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4 text-gray-800 dark:text-white">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h2>
        <div className="flex justify-center items-center p-4">
          <p className="text-red-500 dark:text-red-400">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
      <h2 className="text-lg font-semibold mb-4 text-gray-800 dark:text-white">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h2>
      
      {lunarEvents.length === 0 ? (
        <p className="text-gray-500 dark:text-gray-400 text-center p-4">–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>
      ) : (
        <ul className="space-y-3">
          {lunarEvents.map((event, index) => (
            <li 
              key={index} 
              className="flex items-center p-2 border-b border-gray-100 dark:border-gray-700 last:border-0"
            >
              <span className="text-2xl mr-3">{getPhaseIcon(event.type)}</span>
              <div className="flex-1">
                <p className="font-medium text-gray-800 dark:text-white">{getPhaseLabel(event.type)}</p>
                <p className="text-sm text-gray-500 dark:text-gray-400">{formatDate(event.date)}</p>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default LunarEventsWidget; 