import React, { useState, useEffect, useRef, useCallback } from 'react';
import { createChart, IChartApi, ISeriesApi, UTCTimestamp, CandlestickData, ColorType, LogicalRange } from 'lightweight-charts';
import BitcoinChartService from '../../services/BitcoinChartService';

// ============ –ö–û–ù–°–¢–ê–ù–¢–´ ============
const CHART_CONSTANTS = {
  INITIAL_CANDLES_LIMIT: 1000,        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  INFINITE_SCROLL_LIMIT: 50,          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –ø—Ä–∏ infinite scroll
  SCROLL_THRESHOLD: 10,               // –ü–æ—Ä–æ–≥ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ infinite scroll (—Å–≤–µ—á–µ–π –¥–æ –∫—Ä–∞—è)
  LOADING_DEBOUNCE_MS: 3000,          // –í—Ä–µ–º—è debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  CHART_HEIGHT: 650,                  // –í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
} as const;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Bitcoin
interface RealBitcoinData {
  time: UTCTimestamp;
  open: number;
  high: number;
  low: number;
  close: number;
  volume?: number;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ infinite scroll
const RealBitcoinChart: React.FC<{ 
  timeframe: string;
  onLoadMore: (direction: 'left' | 'right', endTime?: number, requiredCandles?: number) => void;
  isLoading: boolean;
  data: RealBitcoinData[];
}> = ({ timeframe, onLoadMore, isLoading, data }) => {
  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<IChartApi | null>(null);
  const seriesRef = useRef<ISeriesApi<'Candlestick'> | null>(null);
  const isLoadingRef = useRef(false);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const calculateRequiredCandles = useCallback((visibleRange: any, direction: 'left' | 'right') => {
    if (!visibleRange || data.length === 0) return CHART_CONSTANTS.INFINITE_SCROLL_LIMIT;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
    const timeInterval = data.length > 1 ? 
      (data[data.length - 1].time - data[0].time) / (data.length - 1) : 
      (timeframe === '1d' ? 86400 : timeframe === '1h' ? 3600 : 86400);
    
    // –í–∏–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    const visibleDuration = visibleRange.to - visibleRange.from;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –≤–∏–¥–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const visibleCandles = Math.ceil(visibleDuration / timeInterval);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ 2-3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —á–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±—É—Ñ–µ—Ä–∞
    const requiredCandles = Math.max(
      CHART_CONSTANTS.INFINITE_SCROLL_LIMIT, // –ú–∏–Ω–∏–º—É–º 50
      Math.min(
        visibleCandles * 2, // –í 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –≤–∏–¥–∏–º—ã—Ö
        500 // –ú–∞–∫—Å–∏–º—É–º 500 –∑–∞ —Ä–∞–∑
      )
    );
    
    console.log(`üî¢ –†–∞—Å—á–µ—Ç —Å–≤–µ—á–µ–π: –≤–∏–¥–∏–º—ã—Ö=${visibleCandles}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º=${requiredCandles}, –∏–Ω—Ç–µ—Ä–≤–∞–ª=${timeInterval}s`);
    return requiredCandles;
  }, [data, timeframe]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è infinite scroll
  const handleVisibleTimeRangeChange = useCallback((timeRange: any) => {
    if (!timeRange || isLoadingRef.current || isLoading || data.length === 0) return;

    const dataLength = data.length;
    const threshold = CHART_CONSTANTS.SCROLL_THRESHOLD;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
    const oldestDataTime = data[0]?.time;
    const newestDataTime = data[data.length - 1]?.time;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–¥–Ω–æ–π —Å–≤–µ—á–∏
    const timeInterval = dataLength > 1 ? 
      (newestDataTime - oldestDataTime) / (dataLength - 1) : 
      (timeframe === '1d' ? 86400 : timeframe === '1h' ? 3600 : 86400);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤—ã–π –∫—Ä–∞–π (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
    if (timeRange.from <= oldestDataTime + (threshold * timeInterval)) {
      if (oldestDataTime) {
        console.log('üîÑ RealBitcoinChart: –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ª–µ–≤—ã–π –∫—Ä–∞–π)');
        isLoadingRef.current = true;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        const requiredCandles = calculateRequiredCandles(timeRange, 'left');
        onLoadMore('left', oldestDataTime as number, requiredCandles);
        
        setTimeout(() => {
          isLoadingRef.current = false;
        }, CHART_CONSTANTS.LOADING_DEBOUNCE_MS);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π (–±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    if (timeRange.to >= newestDataTime - (threshold * timeInterval)) {
      if (newestDataTime) {
        console.log('üîÑ RealBitcoinChart: –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)');
        isLoadingRef.current = true;
        
        const requiredCandles = calculateRequiredCandles(timeRange, 'right');
        onLoadMore('right', newestDataTime as number, requiredCandles);
        
        setTimeout(() => {
          isLoadingRef.current = false;
        }, CHART_CONSTANTS.LOADING_DEBOUNCE_MS);
      }
    }
  }, [data, onLoadMore, isLoading, calculateRequiredCandles, timeframe]);

  useEffect(() => {
    if (!chartContainerRef.current) return;

    console.log('üöÄ RealBitcoinChart: –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –û–î–ò–ù —Ä–∞–∑
    const chart = createChart(chartContainerRef.current, {
      layout: {
        textColor: '#E5E7EB',
        background: { type: ColorType.Solid, color: '#1F2937' },
      },
      rightPriceScale: {
        borderColor: '#374151',
      },
      timeScale: {
        borderColor: '#374151',
        timeVisible: true,
        secondsVisible: false,
        // –í–∞–∂–Ω–æ –¥–ª—è infinite scroll
        fixLeftEdge: false,
        fixRightEdge: false,
        lockVisibleTimeRangeOnResize: true,
        barSpacing: 8,
        rightOffset: 15,
      },
      grid: {
        vertLines: { color: '#374151' },
        horzLines: { color: '#374151' },
      },
      width: chartContainerRef.current.clientWidth,
      height: CHART_CONSTANTS.CHART_HEIGHT,
    });

    const series = chart.addCandlestickSeries({
      upColor: '#10B981',
      downColor: '#EF4444',
      borderDownColor: '#EF4444',
      borderUpColor: '#10B981',
      wickDownColor: '#EF4444',
      wickUpColor: '#10B981',
      priceFormat: {
        type: 'price',
        precision: 2,
        minMove: 0.01,
      },
    });

    chartRef.current = chart;
    seriesRef.current = series;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è infinite scroll
    chart.timeScale().subscribeVisibleTimeRangeChange(handleVisibleTimeRangeChange);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (data.length > 0) {
      series.setData(data as CandlestickData[]);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
      chart.timeScale().fitContent();
    }

    console.log(`‚úÖ RealBitcoinChart: –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —Å ${data.length} —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏`);

    // Cleanup
    return () => {
      console.log('üßπ RealBitcoinChart: –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞');
      if (chart) {
        try {
          chart.timeScale().unsubscribeVisibleTimeRangeChange(handleVisibleTimeRangeChange);
        } catch (error) {
          console.warn('Warning during unsubscribe:', error);
        }
        chart.remove();
      }
      chartRef.current = null;
      seriesRef.current = null;
    };
  }, []); // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (seriesRef.current && data.length > 0) {
      seriesRef.current.setData(data as CandlestickData[]);
      console.log(`üìä RealBitcoinChart: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (${data.length} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π)`);
    }
  }, [data]);

  return (
    <div className="relative bg-dark-card rounded-lg border border-dark-border overflow-hidden" data-testid="real-bitcoin-chart">
      {isLoading && (
        <div className="absolute top-4 left-4 z-10 bg-dark-bg/90 backdrop-blur-sm px-3 py-2 rounded-lg border border-dark-border">
          <div className="flex items-center space-x-2 text-sm">
            <div className="w-4 h-4 border-2 border-bitcoin border-t-transparent rounded-full animate-spin"></div>
            <span className="text-bitcoin font-medium">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...</span>
          </div>
        </div>
      )}
      <div ref={chartContainerRef} style={{ height: `${CHART_CONSTANTS.CHART_HEIGHT}px`, width: '100%' }} />
    </div>
  );
};

export const RealDataDemo: React.FC = () => {
  const [chartData, setChartData] = useState<RealBitcoinData[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [timeframe, setTimeframe] = useState('1d');
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    loadInitialData();
  }, [timeframe]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log(`üîÑ RealDataDemo: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${timeframe}`);
      
      const result = await BitcoinChartService.getInitialData(timeframe, CHART_CONSTANTS.INITIAL_CANDLES_LIMIT);
      setChartData(result.data);
      
      console.log(`‚úÖ RealDataDemo: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.length} —Å–≤–µ—á–µ–π`);
    } catch (error) {
      console.error('‚ùå RealDataDemo: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è infinite scroll
  const handleLoadMore = useCallback(async (direction: 'left' | 'right', endTime?: number, requiredCandles?: number) => {
    if (loadingMore) return;
    
    try {
      setLoadingMore(true);
      const candlesToLoad = requiredCandles || CHART_CONSTANTS.INFINITE_SCROLL_LIMIT;
      console.log(`üìä RealDataDemo: –ü–æ–¥–≥—Ä—É–∂–∞–µ–º ${direction === 'left' ? '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ' : '–Ω–æ–≤—ã–µ'} –¥–∞–Ω–Ω—ã–µ (${candlesToLoad} —Å–≤–µ—á–µ–π)`);
      
      if (direction === 'left' && endTime) {
        // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ª–∏–º–∏—Ç–æ–º
        const result = await BitcoinChartService.getHistoricalData(timeframe, candlesToLoad, endTime);
        
        if (result.data.length > 0) {
          setChartData(prevData => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–≤–µ—á–∏)
            const existingTimes = new Set(prevData.map(item => item.time));
            const newData = result.data.filter(item => !existingTimes.has(item.time));
            
            console.log(`üìà RealDataDemo: –ü–æ–ª—É—á–µ–Ω–æ ${result.data.length} —Å–≤–µ—á–µ–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${newData.length}`);
            console.log(`üìä RealDataDemo: –ë—ã–ª–æ —Å–≤–µ—á–µ–π: ${prevData.length}, –¥–æ–±–∞–≤–ª—è–µ–º: ${newData.length}`);
            
            if (newData.length === 0) {
              console.log('‚ö†Ô∏è RealDataDemo: –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏');
              return prevData;
            }
            
            const combined = [...newData, ...prevData].sort((a, b) => a.time - b.time);
            console.log(`‚úÖ RealDataDemo: –ò—Ç–æ–≥–æ —Å–≤–µ—á–µ–π: ${combined.length}`);
            return combined;
          });
        }
      }
      // –î–ª—è –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
      console.error('‚ùå RealDataDemo: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoadingMore(false);
    }
  }, [timeframe, loadingMore]);

  const handleTimeframeChange = (newTimeframe: string) => {
    if (newTimeframe !== timeframe) {
      setTimeframe(newTimeframe);
      BitcoinChartService.clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    }
  };

  const handleRefresh = () => {
    BitcoinChartService.clearCache();
    loadInitialData();
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-dark-bg text-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-bitcoin border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <div className="text-moon-silver text-lg">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bitcoin...</div>
          <div className="text-sm text-moon-silver/70 mt-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Å–µ—Ä–≤–µ—Ä–∞</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-dark-bg text-white flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="text-red-400 text-xl mb-4">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
          <div className="text-moon-silver mb-6">{error}</div>
          <button
            onClick={handleRefresh}
            className="px-6 py-2 bg-bitcoin hover:bg-bitcoin/80 text-white rounded transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-dark-bg text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">
            üöÄ MoonBit - –†–µ–∞–ª—å–Ω—ã–µ –î–∞–Ω–Ω—ã–µ Bitcoin
          </h1>
          <p className="text-moon-silver">
            –ì—Ä–∞—Ñ–∏–∫ —Å –∂–∏–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
          </p>
        </div>

        {/* Controls */}
        <div className="bg-dark-card border border-dark-border rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center space-x-4">
              <h2 className="text-lg font-semibold text-white">–†–µ–∞–ª—å–Ω—ã–π Bitcoin –ì—Ä–∞—Ñ–∏–∫</h2>
              <div className="flex items-center space-x-4 text-sm text-moon-silver">
                <span>–î–∞–Ω–Ω—ã–µ: <span className="text-green-400">{chartData.length} —Å–≤–µ—á–µ–π</span></span>
                <span>–¢–∞–π–º—Ñ—Ä–µ–π–º: <span className="text-bitcoin">{timeframe}</span></span>
                {loadingMore && (
                  <span className="text-bitcoin flex items-center space-x-1">
                    <div className="w-3 h-3 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                  </span>
                )}
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              {/* Timeframe selector */}
              <select
                value={timeframe}
                onChange={(e) => handleTimeframeChange(e.target.value)}
                className="px-3 py-1 bg-dark-bg border border-dark-border rounded text-white text-sm"
                disabled={loadingMore}
              >
                <option value="1h">1 —á–∞—Å</option>
                <option value="1d">1 –¥–µ–Ω—å</option>
                <option value="1w">1 –Ω–µ–¥–µ–ª—è</option>
              </select>
              
              <button
                onClick={handleRefresh}
                disabled={loadingMore}
                className="flex items-center space-x-2 px-4 py-2 bg-bitcoin hover:bg-bitcoin/80 disabled:opacity-50 text-white rounded transition-colors"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
              </button>
            </div>
          </div>
        </div>

        {/* Chart */}
        <RealBitcoinChart 
          timeframe={timeframe}
          data={chartData} 
          onLoadMore={handleLoadMore}
          isLoading={loadingMore}
        />

        {/* Instructions */}
        <div className="mt-8 bg-dark-card border border-dark-border rounded-lg p-6">
          <h3 className="text-lg font-semibold text-white mb-4">üéØ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bitcoin —Å Infinite Scroll</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-moon-silver">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <span className="text-green-400">‚úÖ</span>
                <span>üì° <strong>API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</strong> - –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-green-400">‚úÖ</span>
                <span>üîç <strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ</strong> - –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –¥–ª—è –∑—É–º–∞</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-blue-400">üéØ</span>
                <span>‚¨ÖÔ∏è <strong>–°–∫—Ä–æ–ª–ª –≤–ª–µ–≤–æ</strong> - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <span className="text-green-400">‚úÖ</span>
                <span>üíæ <strong>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ</strong> - –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-green-400">‚úÖ</span>
                <span>üìä <strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</strong> - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–∏–Ω–∫–æ–≤</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-green-400">‚úÖ</span>
                <span>‚ö° <strong>–¢–∞–π–º—Ñ—Ä–µ–π–º—ã</strong> - 1h, 1d, 1w</span>
              </div>
            </div>
          </div>
          
          <div className="mt-4 p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
            <div className="flex items-center space-x-2 text-sm">
              <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span className="text-green-400 font-medium">
                üéâ –ì–û–¢–û–í–û: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ infinite scroll!
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}; 