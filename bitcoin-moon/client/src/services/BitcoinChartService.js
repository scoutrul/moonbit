// BitcoinChartService.js - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Bitcoin –≥—Ä–∞—Ñ–∏–∫–æ–≤

class BitcoinChartService {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, –∞ –Ω–µ docker-—Å–µ—Ç—å
    this.baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç docker-—Å–µ—Ç—å, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ localhost –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    if (this.baseUrl.includes('server:3001')) {
      this.baseUrl = 'http://localhost:3001/api';
    }
    
    console.log(`üîß BitcoinChartService: API URL: ${this.baseUrl}`);
    
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   * @param {string} timeframe - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1d, 1h, etc.)
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
   */
  async getInitialData(timeframe = '1d', limit = 100) {
    try {
      console.log(`üìä BitcoinChartService: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (${timeframe}, ${limit})`);
      
      const response = await fetch(
        `${this.baseUrl}/bitcoin/infinite-scroll?timeframe=${timeframe}&limit=${limit}`
      );
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      const result = await response.json();
      
      console.log(`‚úÖ BitcoinChartService: –ü–æ–ª—É—á–µ–Ω–æ ${result.data.length} —Å–≤–µ—á–µ–π`);
      
      return {
        data: result.data.map(this.formatCandlestickData),
        hasMore: result.hasMore,
        timeframe: result.timeframe
      };
    } catch (error) {
      console.error('‚ùå BitcoinChartService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è infinite scroll
   * @param {string} timeframe - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
   * @param {number} endTime - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (unix timestamp)
   * @returns {Promise<Object>} –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  async getHistoricalData(timeframe = '1d', limit = 50, endTime) {
    try {
      console.log(`üìà BitcoinChartService: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ ${new Date(endTime * 1000).toLocaleDateString()}`);
      
      const url = `${this.baseUrl}/bitcoin/infinite-scroll?timeframe=${timeframe}&limit=${limit}&endTime=${endTime}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = `historical_${timeframe}_${limit}_${endTime}`;
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        console.log(`üíæ BitcoinChartService: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
        return cached;
      }
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      const result = await response.json();
      
      const formattedResult = {
        data: result.data.map(this.formatCandlestickData),
        hasMore: result.hasMore,
        timeframe: result.timeframe,
        count: result.count
      };
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.setCache(cacheKey, formattedResult);
      
      console.log(`‚úÖ BitcoinChartService: –ü–æ–ª—É—á–µ–Ω–æ ${result.data.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`);
      
      return formattedResult;
    } catch (error) {
      console.error('‚ùå BitcoinChartService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è lightweight-charts
   * @param {Object} candle - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
   * @returns {Object} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–µ—á–∞
   */
  formatCandlestickData = (candle) => {
    return {
      time: candle.time,
      open: parseFloat(candle.open),
      high: parseFloat(candle.high),
      low: parseFloat(candle.low),
      close: parseFloat(candle.close),
      volume: parseFloat(candle.volume || 0)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
   * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
   * @returns {Object|null} –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
   */
  getFromCache(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    this.cache.delete(key);
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
   * @param {string} key - –ö–ª—é—á –∫—ç—à–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ BitcoinChartService: –ö—ç—à –æ—á–∏—â–µ–Ω');
  }
}

export default new BitcoinChartService(); 