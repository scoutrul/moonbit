/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
 */
import api from './api';
import { fetchAstroEvents, fetchUpcomingEvents, fetchHistoricalEvents } from './astroEvents';
import { generateMockEvents } from '../utils/mockDataGenerator';

// –ö—ç—à —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
let eventsCache = null;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
 */
class EventsService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
   */
  async getEvents() {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (eventsCache !== null) {
        return eventsCache;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
      console.log('–ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      
      // –ó–∞–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç - 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –∏ 6 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
      const now = new Date();
      const startDate = new Date(now);
      startDate.setMonth(startDate.getMonth() - 3);
      
      const endDate = new Date(now);
      endDate.setMonth(endDate.getMonth() + 6);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
      const astroEventsData = await fetchAstroEvents(startDate, endDate);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π
      const moonEvents = astroEventsData.map((event, index) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        const icon = event.type === 'new_moon' ? 'üåë' : 'üåï';
        const title = event.type === 'new_moon' ? '–ù–æ–≤–æ–ª—É–Ω–∏–µ' : '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
        
        return {
          id: `moon-${event.type}-${index}`,
          title: title,
          date: event.date.toISOString(),
          type: 'moon',
          icon: icon,
          description: `–§–∞–∑–∞ –õ—É–Ω—ã: ${title}`
        };
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
      const mockEvents = generateMockEvents();
      const userEvents = mockEvents.filter(event => event.type === 'user');
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
      const allEvents = [
        ...moonEvents,
        ...userEvents
      ];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      const sortedEvents = allEvents.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      eventsCache = sortedEvents;
      
      return sortedEvents;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      console.warn('–ò–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π');
      
      // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
      if (eventsCache === null) {
        eventsCache = generateMockEvents();
      }
      
      return eventsCache;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
   */
  async getUpcomingEvents(limit = 5) {
    try {
      // –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è getEvents, –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      const days = limit * 20; // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å limit —Å–æ–±—ã—Ç–∏–π
      const upcomingLunarEvents = await fetchUpcomingEvents(days);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π
      const events = upcomingLunarEvents.map((event, index) => {
        const icon = event.type === 'new_moon' ? 'üåë' : 'üåï';
        const title = event.type === 'new_moon' ? '–ù–æ–≤–æ–ª—É–Ω–∏–µ' : '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
        
        return {
          id: `moon-upcoming-${event.type}-${index}`,
          title: title,
          date: event.date.toISOString(),
          type: 'moon',
          icon: icon,
          description: `–§–∞–∑–∞ –õ—É–Ω—ã: ${title}`
        };
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      return events.sort((a, b) => new Date(a.date) - new Date(b.date)).slice(0, limit);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
      const events = await this.getEvents();
      const now = new Date();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
      const futureEvents = events.filter((e) => new Date(e.date) > now);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      return futureEvents.slice(0, limit);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
   * @param {string} timeframe - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
   */
  async getEventsForChart(timeframe, startDate, endDate) {
    try {
      // –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      if (!startDate || !endDate) {
        const now = new Date();
        
        endDate = new Date(now);
        startDate = new Date(now);
        
        switch (timeframe) {
          case '1m':
          case '3m':
          case '5m':
          case '15m':
          case '30m':
            // –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ (1 –Ω–∞–∑–∞–¥ + 1 –≤–ø–µ—Ä–µ–¥)
            startDate.setDate(startDate.getDate() - 7);
            endDate.setDate(endDate.getDate() + 7);
            break;
          case '1h':
          case '4h':
          case '12h':
            // –î–ª—è —á–∞—Å–æ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –º–µ—Å—è—Ü–∞ (1 –Ω–∞–∑–∞–¥ + 1 –≤–ø–µ—Ä–µ–¥)
            startDate.setDate(startDate.getDate() - 30);
            endDate.setDate(endDate.getDate() + 30);
            break;
          case '1d':
            // –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (3 –Ω–∞–∑–∞–¥ + 3 –≤–ø–µ—Ä–µ–¥)
            startDate.setMonth(startDate.getMonth() - 3);
            endDate.setMonth(endDate.getMonth() + 3);
            break;
          case '1w':
            // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 1 –≥–æ–¥ (6 –º–µ—Å –Ω–∞–∑–∞–¥ + 6 –≤–ø–µ—Ä–µ–¥)
            startDate.setMonth(startDate.getMonth() - 6);
            endDate.setMonth(endDate.getMonth() + 6);
            break;
          case '1M':
          case '1y':
          case 'all':
            // –î–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –≥–æ–¥–∞ (1 –Ω–∞–∑–∞–¥ + 1 –≤–ø–µ—Ä–µ–¥)
            startDate.setFullYear(startDate.getFullYear() - 1);
            endDate.setFullYear(endDate.getFullYear() + 1);
            break;
          default:
            startDate.setMonth(startDate.getMonth() - 2);
            endDate.setMonth(endDate.getMonth() + 2);
        }
      }
      
      console.log(`–ü–æ–ª—É—á–∞–µ–º –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ ${timeframe}: —Å ${startDate.toISOString()} –ø–æ ${endDate.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const lunarEvents = await fetchAstroEvents(startDate, endDate);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      const events = lunarEvents.map((event, index) => {
        const icon = event.type === 'new_moon' ? 'üåë' : 'üåï';
        const title = event.type === 'new_moon' ? '–ù–æ–≤–æ–ª—É–Ω–∏–µ' : '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
        
        return {
          id: `moon-chart-${event.type}-${index}`,
          title: title,
          date: event.date.toISOString(),
          type: 'moon',
          icon: icon
        };
      });
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${events.length} –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ ${timeframe}`);
      
      return events;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
      const events = await this.getEvents();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      const filteredEvents = events.filter((e) => {
        const eventDate = new Date(e.date);
        return eventDate >= startDate && eventDate <= endDate;
      });
      
      return filteredEvents;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
   * @param {Object} event - –°–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   */
  async addEvent(event) {
    try {
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      console.warn('DEMO MODE: —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
      const newEvent = {
        ...event,
        id: `user-${Date.now()}`,
        type: 'user',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
      if (eventsCache === null) {
        eventsCache = await this.getEvents();
      }
      
      eventsCache.push(newEvent);
      eventsCache.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      return newEvent;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
      const newEvent = {
        ...event,
        id: `user-${Date.now()}`,
        type: 'user',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
      if (eventsCache === null) {
        eventsCache = await this.getEvents();
      }
      
      eventsCache.push(newEvent);
      eventsCache.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      return newEvent;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new EventsService();
