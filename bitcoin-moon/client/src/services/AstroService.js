import api from './api';
import { generateMockEvents } from '../utils/mockDataGenerator';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
 */
class AstroService {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º —Å–æ–±—ã—Ç–∏–π
   */
  async getAstroEvents(startDate, endDate) {
    try {
      console.log('AstroService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', { startDate, endDate });
      const response = await api.get('/astro/events', {
        params: {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString()
        }
      });
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ response.data —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {
        console.warn('AstroService: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API (–Ω–µ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –ø—É—Å—Ç—ã–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const mockEvents = generateMockEvents()
          .filter(event => {
            const eventDate = new Date(event.date);
            return eventDate >= startDate && eventDate <= endDate && event.type === 'moon';
          })
          .map(event => ({
            time: new Date(event.date).getTime() / 1000,
            type: event.type,
            title: event.title,
            icon: event.icon,
            phaseName: event.title,
            date: event.date,  // üÜï –î–æ–±–∞–≤–ª—è–µ–º date –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å BitcoinChartWithLunarPhases
            subtype: event.title === '–ù–æ–≤–æ–ª—É–Ω–∏–µ' ? 'new_moon' : 'full_moon' // üÜï –î–æ–±–∞–≤–ª—è–µ–º subtype
          }));
        
        console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', mockEvents.length);
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return mockEvents.sort((a, b) => a.time - b.time);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
      const events = response.data.map(event => ({
        time: new Date(event.date).getTime() / 1000, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Unix timestamp
        type: event.type,
        title: event.title,
        icon: event.icon,
        phaseName: event.phaseName || event.title,
        date: event.date,  // üÜï –î–æ–±–∞–≤–ª—è–µ–º date –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å BitcoinChartWithLunarPhases
        subtype: event.title === '–ù–æ–≤–æ–ª—É–Ω–∏–µ' ? 'new_moon' : 'full_moon' // üÜï –î–æ–±–∞–≤–ª—è–µ–º subtype
      }));
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return events.sort((a, b) => a.time - b.time);
    } catch (error) {
      console.error('Error fetching astro events:', error);
      console.warn('AstroService: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const mockEvents = generateMockEvents()
        .filter(event => {
          const eventDate = new Date(event.date);
          return eventDate >= startDate && eventDate <= endDate && event.type === 'moon';
        })
        .map(event => ({
          time: new Date(event.date).getTime() / 1000,
          type: event.type,
          title: event.title,
          icon: event.icon,
          phaseName: event.title,
          date: event.date,  // üÜï –î–æ–±–∞–≤–ª—è–µ–º date –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          subtype: event.title === '–ù–æ–≤–æ–ª—É–Ω–∏–µ' ? 'new_moon' : 'full_moon' // üÜï –î–æ–±–∞–≤–ª—è–µ–º subtype
        }));
      
      console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', mockEvents.length);
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return mockEvents.sort((a, b) => a.time - b.time);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –õ—É–Ω—ã
   * @returns {Promise<Object>} –ü—Ä–æ–º–∏—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –õ—É–Ω—ã
   */
  async getCurrentMoonPhase() {
    try {
      console.log('AstroService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã');
      const response = await api.get('/moon/current');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!response.data || Object.keys(response.data).length === 0) {
        console.warn('AstroService: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        return {
          phase: 0.25,
          phaseName: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
          icon: 'üåì',
          nextPhaseTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          nextPhaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'
        };
      }
      
      return {
        phase: response.data.phase,
        phaseName: response.data.phaseName,
        icon: response.data.icon,
        nextPhaseTime: response.data.nextPhaseTime,
        nextPhaseName: response.data.nextPhaseName
      };
    } catch (error) {
      console.error('Error fetching current moon phase:', error);
      console.warn('AstroService: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        phase: 0.25,
        phaseName: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
        icon: 'üåì',
        nextPhaseTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        nextPhaseName: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
   * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  async getUpcomingLunarEvents(days = 30) {
    try {
      console.log(`AstroService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ ${days} –¥–Ω–µ–π`);
      const response = await api.get('/moon/upcoming-events', {
        params: { days }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!response.data || response.data.length === 0 || Object.keys(response.data).length === 0) {
        console.warn('AstroService: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const now = new Date();
        const end = new Date(now);
        end.setDate(end.getDate() + days);
        
        const mockEvents = generateMockEvents()
          .filter(event => {
            const eventDate = new Date(event.date);
            return eventDate >= now && eventDate <= end && event.type === 'moon';
          })
          .map(event => ({
            time: new Date(event.date).getTime() / 1000,
            type: event.type,
            title: event.title,
            icon: event.icon,
            phaseName: event.title
          }));
        
        console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', mockEvents.length);
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return mockEvents.sort((a, b) => a.time - b.time);
      }
      
      const events = response.data.map(event => ({
        time: new Date(event.date).getTime() / 1000,
        type: event.type,
        title: event.title,
        icon: event.icon,
        phaseName: event.phaseName
      }));
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return events.sort((a, b) => a.time - b.time);
    } catch (error) {
      console.error('Error fetching upcoming lunar events:', error);
      console.warn('AstroService: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const now = new Date();
      const end = new Date(now);
      end.setDate(end.getDate() + days);
      
      const mockEvents = generateMockEvents()
        .filter(event => {
          const eventDate = new Date(event.date);
          return eventDate >= now && eventDate <= end && event.type === 'moon';
        })
        .map(event => ({
          time: new Date(event.date).getTime() / 1000,
          type: event.type,
          title: event.title,
          icon: event.icon,
          phaseName: event.title
        }));
      
      console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', mockEvents.length);
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return mockEvents.sort((a, b) => a.time - b.time);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∑—ã –õ—É–Ω—ã
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
   * @returns {Promise<Array>} –ü—Ä–æ–º–∏—Å —Å –º–∞—Å—Å–∏–≤–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∑
   */
  async getNextSignificantPhases(count = 4) {
    try {
      console.log(`AstroService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${count} —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑`);
      const response = await api.get('/moon/next', {
        params: { count }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!response.data || response.data.length === 0 || Object.keys(response.data).length === 0) {
        console.warn('AstroService: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const now = new Date();
        const mockPhases = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–ª—É–Ω–∏—è –∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è
        const phaseTypes = [
          { type: 'new_moon', title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', icon: 'üåë' },
          { type: 'full_moon', title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', icon: 'üåï' }
        ];
        
        for (let i = 0; i < count; i++) {
          const phaseDate = new Date(now);
          phaseDate.setDate(phaseDate.getDate() + 14 * (i + 1));
          
          const phaseInfo = phaseTypes[i % 2];
          
          mockPhases.push({
            time: Math.floor(phaseDate.getTime() / 1000),
            type: phaseInfo.type,
            title: phaseInfo.title,
            icon: phaseInfo.icon,
            phaseName: phaseInfo.title
          });
        }
        
        console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö —Ñ–∞–∑:', mockPhases.length);
        return mockPhases.sort((a, b) => a.time - b.time);
      }
      
      const phases = response.data.map(phase => ({
        time: new Date(phase.date).getTime() / 1000,
        type: phase.type,
        title: phase.phaseName,
        icon: phase.icon,
        phaseName: phase.phaseName
      }));
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return phases.sort((a, b) => a.time - b.time);
    } catch (error) {
      console.error('Error fetching next significant phases:', error);
      console.warn('AstroService: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const now = new Date();
      const mockPhases = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–ª—É–Ω–∏—è –∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è
      const phaseTypes = [
        { type: 'new_moon', title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', icon: 'üåë' },
        { type: 'full_moon', title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', icon: 'üåï' }
      ];
      
      for (let i = 0; i < count; i++) {
        const phaseDate = new Date(now);
        phaseDate.setDate(phaseDate.getDate() + 14 * (i + 1));
        
        const phaseInfo = phaseTypes[i % 2];
        
        mockPhases.push({
          time: Math.floor(phaseDate.getTime() / 1000),
          type: phaseInfo.type,
          title: phaseInfo.title,
          icon: phaseInfo.icon,
          phaseName: phaseInfo.title
        });
      }
      
      console.log('AstroService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–∫–æ–≤—ã—Ö —Ñ–∞–∑:', mockPhases.length);
      return mockPhases.sort((a, b) => a.time - b.time);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∑ –õ—É–Ω—ã –Ω–∞ —Ä—ã–Ω–æ–∫ –±–∏—Ç–∫–æ–∏–Ω–∞
   * @returns {Promise<Object>} –ü—Ä–æ–º–∏—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
   */
  async getMoonInfluence() {
    try {
      console.log('AstroService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∑ –ª—É–Ω—ã');
      const response = await api.get('/moon/influence');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!response.data || Object.keys(response.data).length === 0) {
        console.warn('AstroService: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        return {
          influence: 'neutral',
          description: '–ü–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ –õ—É–Ω—ã –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –±–∏—Ç–∫–æ–∏–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ–π.',
          disclaimer: '–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.'
        };
      }
      
      return response.data;
    } catch (error) {
      console.error('Error fetching moon influence analysis:', error);
      console.warn('AstroService: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      return {
        influence: 'neutral',
        description: '–ü–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ –õ—É–Ω—ã –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –±–∏—Ç–∫–æ–∏–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ–π.',
        disclaimer: '–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.'
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new AstroService(); 