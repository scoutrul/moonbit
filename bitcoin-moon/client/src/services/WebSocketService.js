/**
 * WebSocket Service for real-time Bitcoin price updates
 * Handles connection to Binance WebSocket API with HTTP fallback
 */
class WebSocketService {
  constructor() {
    this.ws = null;
    this.subscribers = new Set();
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000; // Start with 1 second
    this.isConnecting = false;
    this.shouldReconnect = true;
    this.lastPrice = null;
    this.fallbackInterval = null;
    this.connectionMode = 'websocket'; // 'websocket' or 'fallback'
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.environment = this.detectEnvironment();
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', this.environment);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥—ã
    // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket –∫ –≤–Ω–µ—à–Ω–µ–º—É API, –≤ Docker - HTTP fallback –∫ –Ω–∞—à–µ–º—É API
    this.shouldUseWebSocket = this.environment === 'development';
    console.log('üì° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', this.shouldUseWebSocket ? 'WebSocket' : 'HTTP Fallback');
  }

  // üîß –ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  detectEnvironment() {
    try {
      const hostname = window.location.hostname;
      
      // –í dev —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ localhost
      if (hostname === 'localhost' || hostname === '127.0.0.1') {
        return 'development';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite –¥–ª—è Docker –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      const apiUrl = import.meta.env.VITE_API_URL || '';
      
      // –ï—Å–ª–∏ API URL —Å–æ–¥–µ—Ä–∂–∏—Ç 'server:' –∑–Ω–∞—á–∏—Ç –º—ã –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
      if (apiUrl.includes('server:')) {
        return 'docker';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º hostname –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
      if (hostname === '0.0.0.0' || hostname.includes('container')) {
        return 'docker';
      }
      
      return 'production';
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—ã:', error);
      return 'unknown';
    }
  }

  subscribe(callback) {
    console.log('üîó –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ price updates');
    this.subscribers.add(callback);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (this.subscribers.size === 1) {
      this.connect();
    }
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    if (this.lastPrice) {
      callback(this.lastPrice);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.subscribers.delete(callback);
      console.log('üîö –û—Ç–ø–∏—Å–∫–∞ –æ—Ç price updates, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', this.subscribers.size);
      
      // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
      if (this.subscribers.size === 0) {
        this.disconnect();
      }
    };
  }

  connect() {
    if (this.isConnecting) {
      console.log('‚ö° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
      return;
    }

    this.isConnecting = true;
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è real-time updates...');
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥—ã
    if (this.shouldUseWebSocket) {
      this.connectWebSocket();
    } else {
      console.log('üîÑ Docker —Å—Ä–µ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP fallback');
      this.startHttpFallback();
    }
  }

  connectWebSocket() {
    try {
      console.log('üåê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket...');
      
      // Binance WebSocket API –¥–ª—è BTC/USDT ticker
      const wsUrl = 'wss://stream.binance.com:9443/ws/btcusdt@ticker';
      this.ws = new WebSocket(wsUrl);
      
      this.ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Binance API');
        this.isConnecting = false;
        this.reconnectAttempts = 0;
        this.reconnectDelay = 1000;
        this.connectionMode = 'websocket';
        this.stopHttpFallback(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
      };
      
      this.ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          // Binance ticker data format
          if (data.s === 'BTCUSDT' && data.c) {
            const priceData = {
              price: parseFloat(data.c),
              change_24h: parseFloat(data.P),
              change_percentage_24h: parseFloat(data.P),
              last_updated: new Date().toISOString(),
              source: 'binance_websocket'
            };
            
            this.lastPrice = priceData;
            this.notifySubscribers(priceData);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket –¥–∞–Ω–Ω—ã—Ö:', error);
        }
      };
      
      this.ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        this.handleConnectionError();
      };
      
      this.ws.onclose = (event) => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
        this.isConnecting = false;
        
        if (this.shouldReconnect && this.reconnectAttempts < this.maxReconnectAttempts) {
          this.handleReconnect();
        } else if (this.reconnectAttempts >= this.maxReconnectAttempts) {
          console.log('üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ WebSocket –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP fallback');
          this.startHttpFallback();
        }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.handleConnectionError();
    }
  }

  handleConnectionError() {
    this.isConnecting = false;
    
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.handleReconnect();
    } else {
      console.log('üîÑ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP fallback');
      this.startHttpFallback();
    }
  }

  handleReconnect() {
    if (!this.shouldReconnect) return;
    
    this.reconnectAttempts++;
    const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), 30000);
    
    console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
    
    setTimeout(() => {
      if (this.shouldReconnect) {
        this.connectWebSocket();
      }
    }, delay);
  }

  // üîß –£–õ–£–ß–®–ï–ù–ù–´–ô HTTP Fallback —á–µ—Ä–µ–∑ –Ω–∞—à API —Å–µ—Ä–≤–µ—Ä
  async startHttpFallback() {
    if (this.fallbackInterval) {
      console.log('üîÑ HTTP fallback —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }
    
    console.log('üåê –ó–∞–ø—É—Å–∫ HTTP fallback –¥–ª—è price updates...');
    this.connectionMode = 'fallback';
    this.isConnecting = false;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
    await this.fetchPriceData();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    this.fallbackInterval = setInterval(async () => {
      await this.fetchPriceData();
    }, 3000);
  }

  // üîß –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
  async fetchPriceData() {
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
      const viteApiUrl = import.meta.env.VITE_API_URL;
      const isDevMode = window.location.hostname === 'localhost';
      
      let apiUrl;
      if (isDevMode) {
        // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Vite –ø—Ä–æ–∫—Å–∏
        apiUrl = '/api';
        console.log('üîß Dev —Ä–µ–∂–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏');
      } else if (viteApiUrl && !viteApiUrl.includes('server:')) {
        // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º VITE_API_URL –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç server:
        apiUrl = viteApiUrl;
      } else {
        // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        apiUrl = '/api';
      }
      
      console.log('üîç WebSocket fetchPriceData DEBUG:', {
        viteApiUrl,
        isDevMode,
        hostname: window.location.hostname,
        finalApiUrl: apiUrl,
        environment: this.environment
      });
      
      const fullUrl = `${apiUrl}/bitcoin/current`;
      console.log('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫:', fullUrl);
      
      const response = await fetch(fullUrl);  // –ò–∑–º–µ–Ω–µ–Ω–æ —Å /price –Ω–∞ /current
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('üì° HTTP fallback data –ø–æ–ª—É—á–µ–Ω–∞:', data);
      
      if (data && typeof data.price === 'number') {
        const priceData = {
          price: data.price,
          change_24h: data.change_24h || 0,
          change_percentage_24h: data.change_percentage_24h || 0,
          last_updated: data.last_updated || new Date().toISOString(),
          source: 'http_fallback'
        };
        
        this.lastPrice = priceData;
        this.notifySubscribers(priceData);
      } else {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ HTTP fallback:', error);
      
      // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô FALLBACK: –ï—Å–ª–∏ –Ω–∞—à API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (this.lastPrice) {
        const mockPrice = this.generateMockPrice(this.lastPrice.price);
        console.log('üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ:', mockPrice);
        this.notifySubscribers(mockPrice);
      }
    }
  }

  // üîß –ù–û–í–´–ô –ú–ï–¢–û–î: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö mock –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
  generateMockPrice(basePrice = 45000) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (-0.1% –¥–æ +0.1%)
    const change = (Math.random() - 0.5) * 0.002; // 0.2% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const newPrice = basePrice * (1 + change);
    
    return {
      price: Math.round(newPrice * 100) / 100,
      change_24h: 0,
      change_percentage_24h: 0,
      last_updated: new Date().toISOString(),
      source: 'mock_data'
    };
  }

  stopHttpFallback() {
    if (this.fallbackInterval) {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP fallback');
      clearInterval(this.fallbackInterval);
      this.fallbackInterval = null;
    }
  }

  notifySubscribers(priceData) {
    if (this.subscribers.size === 0) return;
    
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${this.subscribers.size} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:`, {
      price: priceData.price,
      source: priceData.source,
      mode: this.connectionMode
    });
    
    this.subscribers.forEach(callback => {
      try {
        callback(priceData);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:', error);
      }
    });
  }

  disconnect() {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket service...');
    this.shouldReconnect = false;
    
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    
    this.stopHttpFallback();
    this.isConnecting = false;
    this.reconnectAttempts = 0;
  }

  // üîß –ù–û–í–´–ô –ú–ï–¢–û–î: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getConnectionInfo() {
    return {
      mode: this.connectionMode,
      environment: this.environment,
      isConnected: this.connectionMode === 'websocket' ? (this.ws && this.ws.readyState === WebSocket.OPEN) : !!this.fallbackInterval,
      subscribersCount: this.subscribers.size,
      lastPrice: this.lastPrice,
      shouldUseWebSocket: this.shouldUseWebSocket
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const webSocketService = new WebSocketService();

export default webSocketService; 