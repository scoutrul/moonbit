import { UTCTimestamp } from 'lightweight-charts';
import { Event } from '../types';

export interface LunarMarker {
  time: UTCTimestamp;
  position: 'aboveBar' | 'belowBar';
  shape: 'circle';
  color: string;
  size: number;
  text: string;
  price: number;
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ - –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –∏–∑ BitcoinChartWithLunarPhases.jsx
 */
export class LunarMarkersUtils {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
   * @param date - –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
   * @param candleData - –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
   * @returns –¶–µ–Ω–∞ –∏–ª–∏ null
   */
  static getApproximatePriceForDate(date: Date, candleData: any[]): number | null {
    if (!candleData || candleData.length === 0) return null;
    
    const targetTimestamp = Math.floor(date.getTime() / 1000);
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ—á—É
    let closestCandle = candleData[0];
    let minDiff = Math.abs(targetTimestamp - closestCandle.time);
    
    for (const candle of candleData) {
      const diff = Math.abs(targetTimestamp - candle.time);
      if (diff < minDiff) {
        minDiff = diff;
        closestCandle = candle;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –±—É–¥—É—â–µ–º (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏)
    if (targetTimestamp > candleData[candleData.length - 1].time) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é
      const lastCandle = candleData[candleData.length - 1];
      return lastCandle.close;
    }
    
    return closestCandle.close;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ª—É–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ —Å–æ–±—ã—Ç–∏–π - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ª–æ–≥–∏–∫–∏ –∏–∑ BitcoinChartWithLunarPhases.jsx
   * @param lunarEvents - –ú–∞—Å—Å–∏–≤ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   * @param candleData - –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π Bitcoin
   * @param timeframe - –¢–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
   * @param isDarkMode - –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
   * @returns –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è LightweightCharts
   */
  static createLunarMarkers(
    lunarEvents: Event[], 
    candleData: any[], 
    timeframe: string, 
    isDarkMode: boolean = true
  ): LunarMarker[] {
    if (!lunarEvents || lunarEvents.length === 0) return [];

    console.log('üåô Creating lunar markers:', lunarEvents.length);

    const lunarMarkers = lunarEvents.map((event, index) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª—É–Ω—ã —á–µ—Ä–µ–∑ subtype –∏–ª–∏ title
      const isNewMoon = event.subtype === 'new_moon' || event.title === '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
      
      // Handle event time - –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –ø–æ–ª–µ –∏–∑ Event –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      let eventTime: number;
      if (event.timestamp) {
        eventTime = event.timestamp;
      } else if (event.date) {
        eventTime = Math.floor(new Date(event.date).getTime() / 1000);
      } else {
        console.warn('Lunar event without valid timestamp:', event);
        return null;
      }
      
      if (!eventTime || eventTime <= 0) {
        console.warn('Lunar event without valid timestamp:', event);
        return null;
      }
      
      // Adaptive marker size based on timeframe - –ö–ê–ö –í –û–°–ù–û–í–ù–û–ú –ì–†–ê–§–ò–ö–ï
      let markerSize = 1;
      switch(timeframe) {
        case '1m':
        case '5m':
        case '15m':
          markerSize = 0.8;
          break;
        case '30m':
        case '1h':
          markerSize = 1;
          break;
        case '4h':
        case '1d':
          markerSize = 1.2;
          break;
        case '1w':
          markerSize = 1.5;
          break;
        default:
          markerSize = 1;
      }
      
      // Marker colors based on event type and theme - –ö–ê–ö –í –û–°–ù–û–í–ù–û–ú –ì–†–ê–§–ò–ö–ï
      const markerColor = isNewMoon 
        ? (isDarkMode ? '#475569' : '#1e293b')  // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è –Ω–æ–≤–æ–ª—É–Ω–∏—è
        : (isDarkMode ? '#facc15' : '#eab308'); // –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è
      
      // Get approximate price for marker
      const eventDate = new Date(eventTime * 1000);
      const price = this.getApproximatePriceForDate(eventDate, candleData);
      
      if (!price) return null;
      
      // Smart positioning to avoid overlaps - –ö–ê–ö –í –û–°–ù–û–í–ù–û–ú –ì–†–ê–§–ò–ö–ï
      let priceOffset = 1.02;
      const nearbyEvents = lunarEvents.filter((otherEvent, otherIndex) => {
        if (otherIndex >= index) return false;
        
        const otherTime = otherEvent.timestamp || (otherEvent.date 
          ? Math.floor(new Date(otherEvent.date).getTime() / 1000)
          : 0);
        
        let proximityThreshold;
        switch(timeframe) {
          case '1m':
          case '5m':
            proximityThreshold = 60 * 60; // 1 hour
            break;
          case '15m':
          case '30m':
            proximityThreshold = 4 * 60 * 60; // 4 hours
            break;
          case '1h':
          case '4h':
            proximityThreshold = 24 * 60 * 60; // 1 day
            break;
          case '1d':
            proximityThreshold = 7 * 24 * 60 * 60; // 7 days
            break;
          case '1w':
            proximityThreshold = 30 * 24 * 60 * 60; // 30 days
            break;
          default:
            proximityThreshold = 24 * 60 * 60; // 1 day
        }
        
        return Math.abs(eventTime - otherTime) < proximityThreshold;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º offset –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
      priceOffset += nearbyEvents.length * 0.015;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π offset –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
      const sameTypeNearbyEvents = nearbyEvents.filter(otherEvent => {
        const otherIsNewMoon = otherEvent.subtype === 'new_moon' || otherEvent.title === '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
        return isNewMoon === otherIsNewMoon;
      });
      
      priceOffset += sameTypeNearbyEvents.length * 0.008;
      
      const markerIcon = isNewMoon ? 'üåë' : 'üåï';
      
      return {
        time: eventTime as UTCTimestamp,
        position: 'aboveBar' as const,
        shape: 'circle' as const,
        color: markerColor,
        size: markerSize,
        text: markerIcon,
        price: price * priceOffset
      };
    }).filter(marker => marker !== null) as LunarMarker[];
    
    // Sort markers by time
    lunarMarkers.sort((a, b) => a.time - b.time);

    console.log(`üåô Created ${lunarMarkers.length} lunar phase markers`);
    return lunarMarkers;
  }
} 