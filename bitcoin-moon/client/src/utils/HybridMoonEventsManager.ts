import AstroService from '../services/AstroService';
import { Event } from '../types';

/**
 * –ì–∏–±—Ä–∏–¥–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å Smart Cache + Viewport Optimization
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ Creative Phase –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * moon events —Å Bitcoin candlestick –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ infinite scroll
 */
export class HybridMoonEventsManager {
  // Smart Cache –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  private cache: Map<string, Event[]> = new Map();
  private loadedRanges: Array<{start: number, end: number}> = [];
  
  // Viewport tracking –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  private currentViewport: {from: number, to: number} | null = null;
  private bufferMultiplier = 3; // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è smooth experience
  
  // Performance optimization
  private readonly maxCacheSize = 30 * 24 * 60 * 60; // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  private lastCleanupTime = 0;
  private readonly cleanupInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  
  constructor() {
    console.log('üåô HybridMoonEventsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±—É—Ñ–µ—Ä–æ–º x' + this.bufferMultiplier);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ moon events —Å Bitcoin –¥–∞–Ω–Ω—ã–º–∏
   * @param visibleTimeRange - –í–∏–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω chart
   * @param bitcoinData - –ú–∞—Å—Å–∏–≤ Bitcoin candlestick –¥–∞–Ω–Ω—ã—Ö
   * @param direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ infinite scroll (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns Promise<Event[]> - Moon events –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async syncMoonEventsWithBitcoinData(
    visibleTimeRange: {from: number, to: number} | null,
    bitcoinData: Array<{time: number}>,
    direction?: 'left' | 'right'
  ): Promise<Event[]> {
    try {
      console.log('üåô HybridMoonEventsManager: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è moon events', {
        visibleRange: visibleTimeRange,
        bitcoinDataLength: bitcoinData.length,
        direction
      });
      
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ viewport + buffer
      const dataRange = this.calculateDataRange(bitcoinData);
      const viewportRange = this.calculateViewportRange(visibleTimeRange);
      const targetRange = this.mergeRanges(dataRange, viewportRange);
      
      if (!targetRange) {
        console.warn('üåô HybridMoonEventsManager: –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å target range');
        return [];
      }
      
      console.log('üåô Target range:', {
        start: new Date(targetRange.start * 1000).toISOString(),
        end: new Date(targetRange.end * 1000).toISOString()
      });
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const missingRanges = this.calculateMissingRanges(targetRange.start, targetRange.end);
      
      if (missingRanges.length > 0) {
        console.log('üåô HybridMoonEventsManager: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:', missingRanges.length);
        
        const loadPromises = missingRanges.map(range => 
          this.loadAndCacheRange(range)
        );
        await Promise.all(loadPromises);
      }
      
      // 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.performPeriodicCleanup(targetRange);
      
      // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const events = this.getEventsFromCache(targetRange.start, targetRange.end);
      
      console.log(`üåô HybridMoonEventsManager: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${events.length} moon events`);
      return events;
      
    } catch (error) {
      console.error('‚ùå HybridMoonEventsManager: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return [];
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ Bitcoin –¥–∞–Ω–Ω—ã—Ö
   * @param bitcoinData - –ú–∞—Å—Å–∏–≤ Bitcoin candlestick –¥–∞–Ω–Ω—ã—Ö
   * @returns {start: number, end: number} | null
   */
  private calculateDataRange(bitcoinData: Array<{time: number}>): {start: number, end: number} | null {
    if (bitcoinData.length === 0) return null;
    
    const times = bitcoinData.map(d => d.time).sort((a, b) => a - b);
    return {
      start: times[0],
      end: times[times.length - 1]
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç viewport range —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
   * @param visibleTimeRange - –í–∏–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
   * @returns {start: number, end: number} | null
   */
  private calculateViewportRange(visibleTimeRange: {from: number, to: number} | null): {start: number, end: number} | null {
    if (!visibleTimeRange) return null;
    
    const visibleDuration = visibleTimeRange.to - visibleTimeRange.from;
    const bufferSize = visibleDuration * (this.bufferMultiplier - 1) / 2;
    
    return {
      start: Math.floor(visibleTimeRange.from - bufferSize),
      end: Math.ceil(visibleTimeRange.to + bufferSize)
    };
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç data range –∏ viewport range –≤ –µ–¥–∏–Ω—ã–π target range
   * @param dataRange - –î–∏–∞–ø–∞–∑–æ–Ω Bitcoin –¥–∞–Ω–Ω—ã—Ö
   * @param viewportRange - –î–∏–∞–ø–∞–∑–æ–Ω viewport —Å –±—É—Ñ–µ—Ä–æ–º
   * @returns {start: number, end: number} | null
   */
  private mergeRanges(
    dataRange: {start: number, end: number} | null,
    viewportRange: {start: number, end: number} | null
  ): {start: number, end: number} | null {
    
    if (!dataRange && !viewportRange) return null;
    if (!dataRange) return viewportRange;
    if (!viewportRange) return dataRange;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    return {
      start: Math.min(dataRange.start, viewportRange.start),
      end: Math.max(dataRange.end, viewportRange.end)
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param targetStart - –ù–∞—á–∞–ª–æ –Ω—É–∂–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @param targetEnd - –ö–æ–Ω–µ—Ü –Ω—É–∂–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @returns Array<{start: number, end: number}> - –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
   */
  private calculateMissingRanges(targetStart: number, targetEnd: number): Array<{start: number, end: number}> {
    if (this.loadedRanges.length === 0) {
      return [{start: targetStart, end: targetEnd}];
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    const isFullyCovered = this.loadedRanges.some(range => 
      range.start <= targetStart && range.end >= targetEnd
    );
    
    if (isFullyCovered) {
      return [];
    }
    
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω –µ—Å–ª–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç
    // TODO: –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    return [{start: targetStart, end: targetEnd}];
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω moon events
   * @param range - –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private async loadAndCacheRange(range: {start: number, end: number}): Promise<void> {
    try {
      const startDate = new Date(range.start * 1000);
      const endDate = new Date(range.end * 1000);
      
      console.log(`üåô –ó–∞–≥—Ä—É–∂–∞–µ–º moon events: ${startDate.toISOString()} - ${endDate.toISOString()}`);
      
      const events = await AstroService.getAstroEvents(startDate, endDate);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Event[]
      const formattedEvents: Event[] = events.map((event: any) => ({
        id: `moon_${event.time}_${event.type}`,
        title: event.title || event.phaseName || 'Moon Event',
        description: event.phaseName || event.title || 'Lunar phase event',
        date: new Date(event.time * 1000).toISOString(),
        timestamp: event.time,
        type: 'lunar' as const,
        subtype: event.type || 'moon_phase',
        category: 'astronomy',
        important: event.type === 'full_moon' || event.type === 'new_moon',
        name: event.phaseName || event.title
      }));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
      const cacheKey = `${range.start}-${range.end}`;
      this.cache.set(cacheKey, formattedEvents);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
      this.loadedRanges.push(range);
      
      console.log(`üåô –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${formattedEvents.length} moon events`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ moon events –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', range, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫—ç—à–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @param start - –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @param end - –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @returns Event[] - –°–æ–±—ã—Ç–∏—è –∏–∑ –∫—ç—à–∞
   */
  private getEventsFromCache(start: number, end: number): Event[] {
    const allEvents: Event[] = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    for (const [cacheKey, events] of this.cache.entries()) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
      const filteredEvents = events.filter(event => 
        event.timestamp >= start && event.timestamp <= end
      );
      
      allEvents.push(...filteredEvents);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueEvents = this.removeDuplicates(allEvents);
    
    return uniqueEvents.sort((a, b) => a.timestamp - b.timestamp);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param events - –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
   * @returns Event[] - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  private removeDuplicates(events: Event[]): Event[] {
    const seen = new Set<string>();
    return events.filter(event => {
      const key = `${event.timestamp}_${event.type}_${event.subtype}`;
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   * @param currentRange - –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
   */
  private performPeriodicCleanup(currentRange: {start: number, end: number}): void {
    const now = Date.now();
    
    if (now - this.lastCleanupTime < this.cleanupInterval) {
      return; // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    }
    
    this.lastCleanupTime = now;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑ –∫—ç—à–∞
    const relevantRanges = this.loadedRanges.filter(range => {
      const isRelevant = !(
        range.end < currentRange.start - this.maxCacheSize || 
        range.start > currentRange.end + this.maxCacheSize
      );
      
      if (!isRelevant) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        const cacheKey = `${range.start}-${range.end}`;
        this.cache.delete(cacheKey);
        console.log(`üßπ –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∫—ç—à–∞: ${cacheKey}`);
      }
      
      return isRelevant;
    });
    
    this.loadedRanges = relevantRanges;
    
    console.log(`üßπ Cleanup: –æ—Å—Ç–∞–ª–æ—Å—å ${this.loadedRanges.length} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≤ –∫—ç—à–µ`);
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
   */
  public clearCache(): void {
    this.cache.clear();
    this.loadedRanges = [];
    this.currentViewport = null;
    console.log('üßπ HybridMoonEventsManager: –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  public getCacheStats(): {ranges: number, events: number, memoryUsage: string} {
    let totalEvents = 0;
    for (const events of this.cache.values()) {
      totalEvents += events.length;
    }
    
    return {
      ranges: this.loadedRanges.length,
      events: totalEvents,
      memoryUsage: `${Math.round(totalEvents * 0.5)}KB` // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    };
  }
} 