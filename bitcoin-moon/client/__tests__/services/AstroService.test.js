import { describe, test, expect, beforeEach, vi } from 'vitest';
import AstroService from '../../src/services/AstroService';

// –ú–æ–∫–∞–µ–º fetch –≥–ª–æ–±–∞–ª—å–Ω–æ
global.fetch = vi.fn();

describe('AstroService', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    fetch.mockClear();
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–∑—ã –ª—É–Ω—ã', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          date: '2025-06-01T12:00:00Z',
          phase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          icon: 'üåï'
        }
      ])
    });

    const result = await AstroService.getMoonPhases();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('/api/astro/moonphases'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBeInstanceOf(Array);
    expect(result[0]).toHaveProperty('date');
    expect(result[0]).toHaveProperty('phase');
  });

  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
    fetch.mockRejectedValueOnce(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
    const result = await AstroService.getMoonPhases();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    expect(consoleSpy).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBeGreaterThan(0);
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    consoleSpy.mockRestore();
  });

  test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ API', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ, –Ω–æ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([])
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});

    const result = await AstroService.getMoonPhases();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
    expect(consoleWarnSpy).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBeGreaterThan(0);
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    consoleWarnSpy.mockRestore();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          date: '2025-06-05T23:12:00Z',
          title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
          description: '–õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª: –ù–æ–≤–æ–ª—É–Ω–∏–µ',
          type: 'moon',
          icon: 'üåë'
        }
      ])
    });

    const result = await AstroService.getLunarEvents();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('/api/astro/lunarevents'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBeInstanceOf(Array);
    expect(result[0]).toHaveProperty('date');
    expect(result[0]).toHaveProperty('title');
    expect(result[0]).toHaveProperty('type', 'moon');
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          date: '2025-06-10T18:30:00Z',
          title: '–°–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ',
          description: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ',
          type: 'astro',
          icon: 'üåû'
        }
      ])
    });

    const result = await AstroService.getAstroEvents();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('/api/astro/events'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBeInstanceOf(Array);
    expect(result[0]).toHaveProperty('date');
    expect(result[0]).toHaveProperty('title');
    expect(result[0]).toHaveProperty('type', 'astro');
  });
}); 