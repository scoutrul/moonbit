import { describe, test, expect, beforeEach, vi } from 'vitest';
import EventsService from '../../src/services/EventsService';

// –ú–æ–∫–∞–µ–º fetch –≥–ª–æ–±–∞–ª—å–Ω–æ
global.fetch = vi.fn();

describe('EventsService', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    fetch.mockClear();
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          id: '1',
          title: '–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°',
          date: new Date(new Date().getTime() + 86400000 * 3).toISOString(),
          type: 'economic',
          icon: 'üìä',
          description: '–†–µ—à–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ',
          impact: 'high'
        }
      ])
    });

    const result = await EventsService.getEconomicEvents(10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('/api/events/economic'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π)
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('limit=10'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBeInstanceOf(Array);
    expect(result[0]).toHaveProperty('id');
    expect(result[0]).toHaveProperty('title');
    expect(result[0]).toHaveProperty('date');
    expect(result[0]).toHaveProperty('type', 'economic');
  });

  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
    fetch.mockRejectedValueOnce(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
    const result = await EventsService.getEconomicEvents(10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    expect(consoleSpy).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBeGreaterThan(0);
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    consoleSpy.mockRestore();
  });

  test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ API', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ, –Ω–æ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([])
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    const consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});

    const result = await EventsService.getEconomicEvents(10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
    expect(consoleWarnSpy).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBeGreaterThan(0);
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    consoleWarnSpy.mockRestore();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          id: '1',
          title: '–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°',
          date: new Date(new Date().getTime() + 86400000 * 3).toISOString(),
          type: 'economic',
          icon: 'üìä'
        },
        {
          id: '2',
          title: '–û—Ç—á–µ—Ç –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏',
          date: new Date(new Date().getTime() + 86400000 * 5).toISOString(),
          type: 'economic',
          icon: 'üìà'
        }
      ])
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –ª–∏–º–∏—Ç–æ–º 2
    const result = await EventsService.getEconomicEvents(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('limit=2'), expect.any(Object));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBe(2);
  });

  test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω', async () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ([
        {
          id: '1',
          title: '–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°',
          date: new Date(new Date().getTime() + 86400000 * 3).toISOString(),
          type: 'economic',
          icon: 'üìä'
        }
      ])
    });

    // –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞
    await EventsService.getEconomicEvents();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fetch –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ª–∏–º–∏—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    expect(fetch).toHaveBeenCalledWith(expect.stringContaining('limit='), expect.any(Object));
  });
}); 