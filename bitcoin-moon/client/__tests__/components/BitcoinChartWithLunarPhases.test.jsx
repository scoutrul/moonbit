import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, test, expect, vi, beforeEach } from 'vitest';
import BitcoinChartWithLunarPhases from '../../src/components/BitcoinChartWithLunarPhases';
import BitcoinService from '../../src/services/BitcoinService';
import AstroService from '../../src/services/AstroService';

// –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
vi.mock('../../src/services/BitcoinService', () => ({
  default: {
    getBitcoinPriceHistory: vi.fn()
  }
}));

vi.mock('../../src/services/AstroService', () => ({
  default: {
    getMoonPhases: vi.fn()
  }
}));

// –ú–æ–∫–∞–µ–º LightweightCharts, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å DOM –Ω–∞–ø—Ä—è–º—É—é
vi.mock('lightweight-charts', () => ({
  createChart: vi.fn(() => ({
    applyOptions: vi.fn(),
    resize: vi.fn(),
    timeScale: vi.fn(() => ({
      fitContent: vi.fn(),
      applyOptions: vi.fn()
    })),
    addCandlestickSeries: vi.fn(() => ({
      applyOptions: vi.fn(),
      setData: vi.fn(),
      setMarkers: vi.fn()
    })),
    subscribeCrosshairMove: vi.fn(),
    unsubscribeCrosshairMove: vi.fn(),
    remove: vi.fn()
  }))
}));

describe('BitcoinChartWithLunarPhases', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    vi.clearAllMocks();
    
    // –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –±–∏—Ç–∫–æ–∏–Ω–∞
    BitcoinService.getBitcoinPriceHistory.mockResolvedValue([
      { time: '2023-01-01', open: 16000, high: 16500, low: 15800, close: 16200 },
      { time: '2023-01-02', open: 16200, high: 16800, low: 16100, close: 16700 }
    ]);
    
    // –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã
    AstroService.getMoonPhases.mockResolvedValue([
      { date: '2023-01-01T12:00:00Z', phase: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', icon: 'üåë' },
      { date: '2023-01-15T12:00:00Z', phase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', icon: 'üåï' }
    ]);
    
    // –ú–æ–∫–∞–µ–º —Ä–∞–±–æ—Ç—É —Å DOM –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    Object.defineProperty(window, 'ResizeObserver', {
      writable: true,
      value: vi.fn().mockImplementation(() => ({
        observe: vi.fn(),
        unobserve: vi.fn(),
        disconnect: vi.fn()
      }))
    });
  });
  
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞', () => {
    render(<BitcoinChartWithLunarPhases />);
    
    expect(screen.getByText('1–î')).toBeInTheDocument();
    expect(screen.getByText('1–ù')).toBeInTheDocument();
    expect(screen.getByText('1–ú')).toBeInTheDocument();
    expect(screen.getByText('3–ú')).toBeInTheDocument();
    expect(screen.getByText('1–ì')).toBeInTheDocument();
    expect(screen.getByText('–í—Å—ë')).toBeInTheDocument();
  });
  
  test('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', async () => {
    render(<BitcoinChartWithLunarPhases />);
    
    await waitFor(() => {
      expect(BitcoinService.getBitcoinPriceHistory).toHaveBeenCalledTimes(1);
      expect(AstroService.getMoonPhases).toHaveBeenCalledTimes(1);
    });
  });
  
  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
    render(<BitcoinChartWithLunarPhases />);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    await waitFor(() => {
      expect(BitcoinService.getBitcoinPriceHistory).toHaveBeenCalledTimes(1);
    });
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ—Å—è—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const monthButton = screen.getByText('1–ú');
    fireEvent.click(monthButton);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    await waitFor(() => {
      expect(BitcoinService.getBitcoinPriceHistory).toHaveBeenCalledTimes(2);
      expect(BitcoinService.getBitcoinPriceHistory).toHaveBeenLastCalledWith(expect.stringContaining('month'));
    });
  });
  
  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏', () => {
    // –ú–æ–∫–∞–µ–º –¥–æ–ª–≥—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    BitcoinService.getBitcoinPriceHistory.mockReturnValue(new Promise(() => {}));
    
    render(<BitcoinChartWithLunarPhases />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')).toBeInTheDocument();
  });
  
  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', async () => {
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
    const errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
    BitcoinService.getBitcoinPriceHistory.mockRejectedValue(new Error(errorMessage));
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.error
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
    
    render(<BitcoinChartWithLunarPhases />);
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalled();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')).toBeInTheDocument();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.error
    consoleSpy.mockRestore();
  });
}); 