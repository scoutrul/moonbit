import { render, screen, waitFor } from '@testing-library/react';
import { describe, test, expect, vi, beforeEach } from 'vitest';
import UpcomingEvents from '../../src/components/UpcomingEvents';
import EventsService from '../../src/services/EventsService';

// –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
vi.mock('../../src/services/EventsService', () => ({
  default: {
    getEconomicEvents: vi.fn()
  }
}));

describe('UpcomingEvents', () => {
  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    vi.clearAllMocks();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    EventsService.getEconomicEvents.mockReturnValue(new Promise(() => {}));
    
    render(<UpcomingEvents />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    expect(screen.getByText('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è')).toBeInTheDocument();
    expect(screen.queryByText('–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π')).not.toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ', async () => {
    // –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π
    const mockEvents = [
      {
        id: '1',
        title: '–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°',
        date: new Date(new Date().getTime() + 86400000 * 3).toISOString(),
        type: 'economic',
        icon: 'üìä',
        description: '–†–µ—à–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ',
        impact: 'high'
      },
      {
        id: '2',
        title: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        date: new Date(new Date().getTime() + 86400000 * 5).toISOString(),
        type: 'moon',
        icon: 'üåë',
        description: '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ'
      }
    ];
    
    EventsService.getEconomicEvents.mockResolvedValue(mockEvents);
    
    render(<UpcomingEvents />);
    
    // –ñ–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    await waitFor(() => {
      expect(screen.getByText('–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°')).toBeInTheDocument();
      expect(screen.getByText('–ù–æ–≤–æ–ª—É–Ω–∏–µ')).toBeInTheDocument();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    expect(screen.getByText('–í–∞–∂–Ω–æ')).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–±—ã—Ç–∏–π', async () => {
    // –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
    EventsService.getEconomicEvents.mockResolvedValue([]);
    
    render(<UpcomingEvents />);
    
    // –ñ–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–±—ã—Ç–∏–π
    await waitFor(() => {
      // –í –∫–æ–¥–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—É—Å—Ç–æ–º –º–∞—Å—Å–∏–≤–µ,
      // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      expect(screen.getByText('–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°')).toBeInTheDocument();
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ', async () => {
    // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    EventsService.getEconomicEvents.mockRejectedValue(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'));
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.error, —á—Ç–æ–±—ã —Ç–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞—Å–æ—Ä–µ–Ω –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});
    
    render(<UpcomingEvents />);
    
    // –ñ–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await waitFor(() => {
      expect(screen.getByText('–ó–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°')).toBeInTheDocument();
    });
    
    // –û—á–∏—â–∞–µ–º –º–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    consoleSpy.mockRestore();
  });

  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π', async () => {
    // –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    
    const mockEvents = [
      {
        id: '1',
        title: '–°–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è',
        date: today.toISOString(),
        type: 'economic',
        icon: 'üìä'
      },
      {
        id: '2',
        title: '–°–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞',
        date: tomorrow.toISOString(),
        type: 'economic',
        icon: 'üìà'
      }
    ];
    
    EventsService.getEconomicEvents.mockResolvedValue(mockEvents);
    
    render(<UpcomingEvents />);
    
    // –ñ–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    await waitFor(() => {
      expect(screen.getByText('–°–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è')).toBeInTheDocument();
      expect(screen.getByText('–°–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞')).toBeInTheDocument();
    });
  });
}); 